// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0
// @generated from file dsp/v1alpha1/client.proto (package dsp.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ClientServicePingRequest, ClientServicePingResponse, GetProviderCatalogueRequest, GetProviderCatalogueResponse, GetProviderDatasetDownloadInformationRequest, GetProviderDatasetDownloadInformationResponse, GetProviderDatasetRequest, GetProviderDatasetResponse, SignalTransferCancelledRequest, SignalTransferCancelledResponse, SignalTransferCompleteRequest, SignalTransferCompleteResponse, SignalTransferResumeRequest, SignalTransferResumeResponse, SignalTransferSuspendRequest, SignalTransferSuspendResponse } from "./client_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * The ClientService is the expected grpc service that RUN-DSP will interface with.
 * Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
 * The reason for this is that authorization will vary between dataspaces. Also, the provider
 * will want to show different data dependent on the credentials.
 *
 * @generated from service dsp.v1alpha1.ClientService
 */
export const ClientService = {
  typeName: "dsp.v1alpha1.ClientService",
  methods: {
    /**
     * Ping is a request to test if the provider is working, and to test the auth information.
     *
     * @generated from rpc dsp.v1alpha1.ClientService.Ping
     */
    ping: {
      name: "Ping",
      I: ClientServicePingRequest,
      O: ClientServicePingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets the catalogue based on the query parameters and the authorization header.
     *
     * @generated from rpc dsp.v1alpha1.ClientService.GetProviderCatalogue
     */
    getProviderCatalogue: {
      name: "GetProviderCatalogue",
      I: GetProviderCatalogueRequest,
      O: GetProviderCatalogueResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets information about a single dataset.
     *
     * @generated from rpc dsp.v1alpha1.ClientService.GetProviderDataset
     */
    getProviderDataset: {
      name: "GetProviderDataset",
      I: GetProviderDatasetRequest,
      O: GetProviderDatasetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Publishes a dataset,
     *
     * @generated from rpc dsp.v1alpha1.ClientService.GetProviderDatasetDownloadInformation
     */
    getProviderDatasetDownloadInformation: {
      name: "GetProviderDatasetDownloadInformation",
      I: GetProviderDatasetDownloadInformationRequest,
      O: GetProviderDatasetDownloadInformationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Tells provider that we have finished our transfer.
     *
     * @generated from rpc dsp.v1alpha1.ClientService.SignalTransferComplete
     */
    signalTransferComplete: {
      name: "SignalTransferComplete",
      I: SignalTransferCompleteRequest,
      O: SignalTransferCompleteResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Tells provider to cancel file transfer
     *
     * @generated from rpc dsp.v1alpha1.ClientService.SignalTransferCancelled
     */
    signalTransferCancelled: {
      name: "SignalTransferCancelled",
      I: SignalTransferCancelledRequest,
      O: SignalTransferCancelledResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Tells provider to suspend file transfer
     *
     * @generated from rpc dsp.v1alpha1.ClientService.SignalTransferSuspend
     */
    signalTransferSuspend: {
      name: "SignalTransferSuspend",
      I: SignalTransferSuspendRequest,
      O: SignalTransferSuspendResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Tells provider to resume file transfer
     *
     * @generated from rpc dsp.v1alpha1.ClientService.SignalTransferResume
     */
    signalTransferResume: {
      name: "SignalTransferResume",
      I: SignalTransferResumeRequest,
      O: SignalTransferResumeResponse,
      kind: MethodKind.Unary,
    },
  }
};

