// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file dsp/v1alpha1/provider.proto (package dsp.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Dataset, PublishInfo } from "./types_pb.js";

/**
 * PingRequest is an empty message, used instead of the Empty type in case we want
 * to add parameters.
 *
 * @generated from message dsp.v1alpha1.PingRequest
 */
export declare class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.PingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest;

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean;
}

/**
 * PingResponse contains infomational data about the provider.
 *
 * @generated from message dsp.v1alpha1.PingResponse
 */
export declare class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: string provider_name = 1;
   */
  providerName: string;

  /**
   * @generated from field: string provider_description = 2;
   */
  providerDescription: string;

  /**
   * @generated from field: bool authenticated = 3;
   */
  authenticated: boolean;

  /**
   * An ID for the data service, can be any uuid as long as it's consistent.
   *
   * @generated from field: string dataservice_id = 4;
   */
  dataserviceId: string;

  /**
   * dataservice URL where data is downloaded from.
   *
   * @generated from field: string dataservice_url = 5;
   */
  dataserviceUrl: string;

  constructor(data?: PartialMessage<PingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.PingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse;

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean;
}

/**
 * GetCatalogRequest represents the parameters for the GetCatalog call.
 *
 * @generated from message dsp.v1alpha1.GetCatalogueRequest
 */
export declare class GetCatalogueRequest extends Message<GetCatalogueRequest> {
  /**
   * query_parameters is just a key/value map. These are not specified in the dataspace standard.
   * RUN-DSP also does not define them yet, so for now this is a placeholder.
   *
   * @generated from field: map<string, string> query_parameters = 1;
   */
  queryParameters: { [key: string]: string };

  constructor(data?: PartialMessage<GetCatalogueRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetCatalogueRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCatalogueRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCatalogueRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCatalogueRequest;

  static equals(a: GetCatalogueRequest | PlainMessage<GetCatalogueRequest> | undefined, b: GetCatalogueRequest | PlainMessage<GetCatalogueRequest> | undefined): boolean;
}

/**
 * GetCatalogueResponse returns all the datasets matched by GetCatalogue.
 *
 * @generated from message dsp.v1alpha1.GetCatalogueResponse
 */
export declare class GetCatalogueResponse extends Message<GetCatalogueResponse> {
  /**
   * @generated from field: repeated dsp.v1alpha1.Dataset datasets = 1;
   */
  datasets: Dataset[];

  constructor(data?: PartialMessage<GetCatalogueResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetCatalogueResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCatalogueResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCatalogueResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCatalogueResponse;

  static equals(a: GetCatalogueResponse | PlainMessage<GetCatalogueResponse> | undefined, b: GetCatalogueResponse | PlainMessage<GetCatalogueResponse> | undefined): boolean;
}

/**
 * GetDatasetRequest contains the dataset ID.
 *
 * @generated from message dsp.v1alpha1.GetDatasetRequest
 */
export declare class GetDatasetRequest extends Message<GetDatasetRequest> {
  /**
   * @generated from field: string dataset_id = 1;
   */
  datasetId: string;

  constructor(data?: PartialMessage<GetDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetRequest;

  static equals(a: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined, b: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined): boolean;
}

/**
 * GetDatasetResponse contains the requested dataset.
 *
 * @generated from message dsp.v1alpha1.GetDatasetResponse
 */
export declare class GetDatasetResponse extends Message<GetDatasetResponse> {
  /**
   * @generated from field: dsp.v1alpha1.Dataset dataset = 1;
   */
  dataset?: Dataset;

  constructor(data?: PartialMessage<GetDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetResponse;

  static equals(a: GetDatasetResponse | PlainMessage<GetDatasetResponse> | undefined, b: GetDatasetResponse | PlainMessage<GetDatasetResponse> | undefined): boolean;
}

/**
 * PublishDatasetRequest contains the ID for the dataset, and a publish ID that's specific to
 * this publish instance. A dataset can be published many concurrent times with different credentials.
 *
 * @generated from message dsp.v1alpha1.PublishDatasetRequest
 */
export declare class PublishDatasetRequest extends Message<PublishDatasetRequest> {
  /**
   * @generated from field: string dataset_id = 1;
   */
  datasetId: string;

  /**
   * @generated from field: string publish_id = 2;
   */
  publishId: string;

  constructor(data?: PartialMessage<PublishDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.PublishDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishDatasetRequest;

  static equals(a: PublishDatasetRequest | PlainMessage<PublishDatasetRequest> | undefined, b: PublishDatasetRequest | PlainMessage<PublishDatasetRequest> | undefined): boolean;
}

/**
 * PublishDatasetResponse contains the publish information.
 *
 * @generated from message dsp.v1alpha1.PublishDatasetResponse
 */
export declare class PublishDatasetResponse extends Message<PublishDatasetResponse> {
  /**
   * @generated from field: dsp.v1alpha1.PublishInfo publish_info = 1;
   */
  publishInfo?: PublishInfo;

  constructor(data?: PartialMessage<PublishDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.PublishDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishDatasetResponse;

  static equals(a: PublishDatasetResponse | PlainMessage<PublishDatasetResponse> | undefined, b: PublishDatasetResponse | PlainMessage<PublishDatasetResponse> | undefined): boolean;
}

/**
 * UnpublishDatasetRequest contains the publish ID of the published dataset.
 *
 * @generated from message dsp.v1alpha1.UnpublishDatasetRequest
 */
export declare class UnpublishDatasetRequest extends Message<UnpublishDatasetRequest> {
  /**
   * @generated from field: string publish_id = 1;
   */
  publishId: string;

  constructor(data?: PartialMessage<UnpublishDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.UnpublishDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpublishDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpublishDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpublishDatasetRequest;

  static equals(a: UnpublishDatasetRequest | PlainMessage<UnpublishDatasetRequest> | undefined, b: UnpublishDatasetRequest | PlainMessage<UnpublishDatasetRequest> | undefined): boolean;
}

/**
 * UnpublishDatasetResponse contains a boolean indicating success.
 *
 * @generated from message dsp.v1alpha1.UnpublishDatasetResponse
 */
export declare class UnpublishDatasetResponse extends Message<UnpublishDatasetResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  constructor(data?: PartialMessage<UnpublishDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.UnpublishDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpublishDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpublishDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpublishDatasetResponse;

  static equals(a: UnpublishDatasetResponse | PlainMessage<UnpublishDatasetResponse> | undefined, b: UnpublishDatasetResponse | PlainMessage<UnpublishDatasetResponse> | undefined): boolean;
}

/**
 * SuspendPublishedDatasetRequest contains the publish ID of the published dataset.
 *
 * @generated from message dsp.v1alpha1.SuspendPublishedDatasetRequest
 */
export declare class SuspendPublishedDatasetRequest extends Message<SuspendPublishedDatasetRequest> {
  /**
   * @generated from field: string publish_id = 1;
   */
  publishId: string;

  constructor(data?: PartialMessage<SuspendPublishedDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SuspendPublishedDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuspendPublishedDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuspendPublishedDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuspendPublishedDatasetRequest;

  static equals(a: SuspendPublishedDatasetRequest | PlainMessage<SuspendPublishedDatasetRequest> | undefined, b: SuspendPublishedDatasetRequest | PlainMessage<SuspendPublishedDatasetRequest> | undefined): boolean;
}

/**
 * SuspendPublshedDatasetResponse indicates success
 *
 * @generated from message dsp.v1alpha1.SuspendPublishedDatasetResponse
 */
export declare class SuspendPublishedDatasetResponse extends Message<SuspendPublishedDatasetResponse> {
  constructor(data?: PartialMessage<SuspendPublishedDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SuspendPublishedDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuspendPublishedDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuspendPublishedDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuspendPublishedDatasetResponse;

  static equals(a: SuspendPublishedDatasetResponse | PlainMessage<SuspendPublishedDatasetResponse> | undefined, b: SuspendPublishedDatasetResponse | PlainMessage<SuspendPublishedDatasetResponse> | undefined): boolean;
}

/**
 * UnsuspendPublishedDataset contains the publish ID of the published dataset.
 *
 * @generated from message dsp.v1alpha1.UnsuspendPublishedDatasetRequest
 */
export declare class UnsuspendPublishedDatasetRequest extends Message<UnsuspendPublishedDatasetRequest> {
  /**
   * @generated from field: string publish_id = 1;
   */
  publishId: string;

  constructor(data?: PartialMessage<UnsuspendPublishedDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.UnsuspendPublishedDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsuspendPublishedDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsuspendPublishedDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsuspendPublishedDatasetRequest;

  static equals(a: UnsuspendPublishedDatasetRequest | PlainMessage<UnsuspendPublishedDatasetRequest> | undefined, b: UnsuspendPublishedDatasetRequest | PlainMessage<UnsuspendPublishedDatasetRequest> | undefined): boolean;
}

/**
 * UnsuspendPublishedDatasetResponse indicates success
 *
 * @generated from message dsp.v1alpha1.UnsuspendPublishedDatasetResponse
 */
export declare class UnsuspendPublishedDatasetResponse extends Message<UnsuspendPublishedDatasetResponse> {
  constructor(data?: PartialMessage<UnsuspendPublishedDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.UnsuspendPublishedDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsuspendPublishedDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsuspendPublishedDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsuspendPublishedDatasetResponse;

  static equals(a: UnsuspendPublishedDatasetResponse | PlainMessage<UnsuspendPublishedDatasetResponse> | undefined, b: UnsuspendPublishedDatasetResponse | PlainMessage<UnsuspendPublishedDatasetResponse> | undefined): boolean;
}

