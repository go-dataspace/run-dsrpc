// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file dsp/v1alpha1/types.proto (package dsp.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AuthenticationType represents the way to authenticate to get a published information.
 *
 * @generated from enum dsp.v1alpha1.AuthenticationType
 */
export declare enum AuthenticationType {
  /**
   * @generated from enum value: AUTHENTICATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTHENTICATION_TYPE_BEARER = 1;
   */
  BEARER = 1,

  /**
   * @generated from enum value: AUTHENTICATION_TYPE_BASIC = 2;
   */
  BASIC = 2,
}

/**
 * Dataset represents a dataset. What exactly is in a dataset is up to the service.
 * An example of a dataset could be a file that's served, or multiple files
 * that are considered a set.
 *
 * @generated from message dsp.v1alpha1.Dataset
 */
export declare class Dataset extends Message<Dataset> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: string access_methods = 3;
   */
  accessMethods: string;

  /**
   * @generated from field: repeated dsp.v1alpha1.Multilingual description = 4;
   */
  description: Multilingual[];

  /**
   * @generated from field: repeated string keywords = 5;
   */
  keywords: string[];

  /**
   * @generated from field: optional string creator = 6;
   */
  creator?: string;

  /**
   * @generated from field: optional google.protobuf.Timestamp issued = 7;
   */
  issued?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp modified = 8;
   */
  modified?: Timestamp;

  /**
   * @generated from field: map<string, string> metadata = 9;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: optional string license = 10;
   */
  license?: string;

  /**
   * @generated from field: optional string access_rights = 11;
   */
  accessRights?: string;

  /**
   * @generated from field: optional string rights = 12;
   */
  rights?: string;

  /**
   * @generated from field: int64 byte_size = 13;
   */
  byteSize: bigint;

  /**
   * @generated from field: string media_type = 14;
   */
  mediaType: string;

  /**
   * @generated from field: optional string format = 15;
   */
  format?: string;

  /**
   * @generated from field: optional string compress_format = 16;
   */
  compressFormat?: string;

  /**
   * @generated from field: optional string package_format = 17;
   */
  packageFormat?: string;

  /**
   * @generated from field: optional dsp.v1alpha1.Checksum checksum = 18;
   */
  checksum?: Checksum;

  constructor(data?: PartialMessage<Dataset>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.Dataset";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dataset;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dataset;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dataset;

  static equals(a: Dataset | PlainMessage<Dataset> | undefined, b: Dataset | PlainMessage<Dataset> | undefined): boolean;
}

/**
 * PublishInfo represents a published file, where to get it and its authentication details.
 *
 * @generated from message dsp.v1alpha1.PublishInfo
 */
export declare class PublishInfo extends Message<PublishInfo> {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: dsp.v1alpha1.AuthenticationType authentication_type = 2;
   */
  authenticationType: AuthenticationType;

  /**
   * @generated from field: string username = 3;
   */
  username: string;

  /**
   * @generated from field: string password = 4;
   */
  password: string;

  constructor(data?: PartialMessage<PublishInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.PublishInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishInfo;

  static equals(a: PublishInfo | PlainMessage<PublishInfo> | undefined, b: PublishInfo | PlainMessage<PublishInfo> | undefined): boolean;
}

/**
 * Multilingual represents a message with language metadata attached.
 *
 * @generated from message dsp.v1alpha1.Multilingual
 */
export declare class Multilingual extends Message<Multilingual> {
  /**
   * @generated from field: string value = 1;
   */
  value: string;

  /**
   * @generated from field: string language = 2;
   */
  language: string;

  constructor(data?: PartialMessage<Multilingual>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.Multilingual";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Multilingual;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Multilingual;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Multilingual;

  static equals(a: Multilingual | PlainMessage<Multilingual> | undefined, b: Multilingual | PlainMessage<Multilingual> | undefined): boolean;
}

/**
 * Checksum represents the checksum of a dataset.
 *
 * @generated from message dsp.v1alpha1.Checksum
 */
export declare class Checksum extends Message<Checksum> {
  /**
   * @generated from field: string algorithm = 1;
   */
  algorithm: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<Checksum>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.Checksum";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Checksum;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Checksum;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Checksum;

  static equals(a: Checksum | PlainMessage<Checksum> | undefined, b: Checksum | PlainMessage<Checksum> | undefined): boolean;
}

