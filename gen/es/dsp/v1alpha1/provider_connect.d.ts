// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0
// @generated from file dsp/v1alpha1/provider.proto (package dsp.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetCatalogueRequest, GetCatalogueResponse, GetDatasetRequest, GetDatasetResponse, PingRequest, PingResponse, PublishDatasetRequest, PublishDatasetResponse, SuspendPublishedDatasetRequest, SuspendPublishedDatasetResponse, UnpublishDatasetRequest, UnpublishDatasetResponse, UnsuspendPublishedDatasetRequest, UnsuspendPublishedDatasetResponse } from "./provider_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * The ProviderService is the expected grpc service that RUN-DSP will interface with.
 * Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
 * The reason for this is that authorization will vary between dataspaces. Also, the provider
 * will want to show different data dependent on the credentials.
 *
 * @generated from service dsp.v1alpha1.ProviderService
 */
export declare const ProviderService: {
  readonly typeName: "dsp.v1alpha1.ProviderService",
  readonly methods: {
    /**
     * Ping is a request to test if the provider is working, and to test the auth information.
     *
     * @generated from rpc dsp.v1alpha1.ProviderService.Ping
     */
    readonly ping: {
      readonly name: "Ping",
      readonly I: typeof PingRequest,
      readonly O: typeof PingResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets the catalogue based on the query parameters and the authorization header.
     *
     * @generated from rpc dsp.v1alpha1.ProviderService.GetCatalogue
     */
    readonly getCatalogue: {
      readonly name: "GetCatalogue",
      readonly I: typeof GetCatalogueRequest,
      readonly O: typeof GetCatalogueResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets information about a single dataset.
     *
     * @generated from rpc dsp.v1alpha1.ProviderService.GetDataset
     */
    readonly getDataset: {
      readonly name: "GetDataset",
      readonly I: typeof GetDatasetRequest,
      readonly O: typeof GetDatasetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Publishes a dataset,
     *
     * @generated from rpc dsp.v1alpha1.ProviderService.PublishDataset
     */
    readonly publishDataset: {
      readonly name: "PublishDataset",
      readonly I: typeof PublishDatasetRequest,
      readonly O: typeof PublishDatasetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Unpublishes a dataset.
     *
     * @generated from rpc dsp.v1alpha1.ProviderService.UnpublishDataset
     */
    readonly unpublishDataset: {
      readonly name: "UnpublishDataset",
      readonly I: typeof UnpublishDatasetRequest,
      readonly O: typeof UnpublishDatasetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Asks provider to suspend a transfer
     *
     * @generated from rpc dsp.v1alpha1.ProviderService.SuspendPublishedDataset
     */
    readonly suspendPublishedDataset: {
      readonly name: "SuspendPublishedDataset",
      readonly I: typeof SuspendPublishedDatasetRequest,
      readonly O: typeof SuspendPublishedDatasetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Asks provider to unsuspend (re-publish?) a transfer
     *
     * @generated from rpc dsp.v1alpha1.ProviderService.UnsuspendPublishedDataset
     */
    readonly unsuspendPublishedDataset: {
      readonly name: "UnsuspendPublishedDataset",
      readonly I: typeof UnsuspendPublishedDatasetRequest,
      readonly O: typeof UnsuspendPublishedDatasetResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

