// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file dsp/v1alpha1/client.proto (package dsp.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Dataset, PublishInfo } from "./types_pb.js";

/**
 * ClientServicePingRequest is an empty message, used instead of the Empty type in case we want
 * to add parameters.
 *
 * @generated from message dsp.v1alpha1.ClientServicePingRequest
 */
export declare class ClientServicePingRequest extends Message<ClientServicePingRequest> {
  constructor(data?: PartialMessage<ClientServicePingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.ClientServicePingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientServicePingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientServicePingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientServicePingRequest;

  static equals(a: ClientServicePingRequest | PlainMessage<ClientServicePingRequest> | undefined, b: ClientServicePingRequest | PlainMessage<ClientServicePingRequest> | undefined): boolean;
}

/**
 * ClientServicePingResponse is an empty message for checking GRPC connection.
 *
 * @generated from message dsp.v1alpha1.ClientServicePingResponse
 */
export declare class ClientServicePingResponse extends Message<ClientServicePingResponse> {
  constructor(data?: PartialMessage<ClientServicePingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.ClientServicePingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientServicePingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientServicePingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientServicePingResponse;

  static equals(a: ClientServicePingResponse | PlainMessage<ClientServicePingResponse> | undefined, b: ClientServicePingResponse | PlainMessage<ClientServicePingResponse> | undefined): boolean;
}

/**
 * GetProviderCatalogueRequest represents the parameters for the GetProviderCatalogue request
 *
 * @generated from message dsp.v1alpha1.GetProviderCatalogueRequest
 */
export declare class GetProviderCatalogueRequest extends Message<GetProviderCatalogueRequest> {
  /**
   * query_parameters is just a key/value map. These are not specified in the dataspace standard.
   * RUN-DSP also does not define them yet, so for now this is a placeholder.
   *
   * @generated from field: string provider_uri = 1;
   */
  providerUri: string;

  /**
   * @generated from field: map<string, string> query_parameters = 2;
   */
  queryParameters: { [key: string]: string };

  constructor(data?: PartialMessage<GetProviderCatalogueRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetProviderCatalogueRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderCatalogueRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderCatalogueRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderCatalogueRequest;

  static equals(a: GetProviderCatalogueRequest | PlainMessage<GetProviderCatalogueRequest> | undefined, b: GetProviderCatalogueRequest | PlainMessage<GetProviderCatalogueRequest> | undefined): boolean;
}

/**
 * GetProviderCatalogueResponse returns all the datasets matched by GetProviderCatalogue.
 *
 * @generated from message dsp.v1alpha1.GetProviderCatalogueResponse
 */
export declare class GetProviderCatalogueResponse extends Message<GetProviderCatalogueResponse> {
  /**
   * @generated from field: repeated dsp.v1alpha1.Dataset datasets = 1;
   */
  datasets: Dataset[];

  constructor(data?: PartialMessage<GetProviderCatalogueResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetProviderCatalogueResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderCatalogueResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderCatalogueResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderCatalogueResponse;

  static equals(a: GetProviderCatalogueResponse | PlainMessage<GetProviderCatalogueResponse> | undefined, b: GetProviderCatalogueResponse | PlainMessage<GetProviderCatalogueResponse> | undefined): boolean;
}

/**
 * GetProviderDatasetRequest contains the dataset ID.
 *
 * @generated from message dsp.v1alpha1.GetProviderDatasetRequest
 */
export declare class GetProviderDatasetRequest extends Message<GetProviderDatasetRequest> {
  /**
   * @generated from field: string provider_url = 1;
   */
  providerUrl: string;

  /**
   * @generated from field: string dataset_id = 2;
   */
  datasetId: string;

  constructor(data?: PartialMessage<GetProviderDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetProviderDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderDatasetRequest;

  static equals(a: GetProviderDatasetRequest | PlainMessage<GetProviderDatasetRequest> | undefined, b: GetProviderDatasetRequest | PlainMessage<GetProviderDatasetRequest> | undefined): boolean;
}

/**
 * GetProviderDatasetResponse contains the requested dataset.
 *
 * @generated from message dsp.v1alpha1.GetProviderDatasetResponse
 */
export declare class GetProviderDatasetResponse extends Message<GetProviderDatasetResponse> {
  /**
   * @generated from field: string provider_url = 1;
   */
  providerUrl: string;

  /**
   * @generated from field: dsp.v1alpha1.Dataset dataset = 2;
   */
  dataset?: Dataset;

  constructor(data?: PartialMessage<GetProviderDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetProviderDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderDatasetResponse;

  static equals(a: GetProviderDatasetResponse | PlainMessage<GetProviderDatasetResponse> | undefined, b: GetProviderDatasetResponse | PlainMessage<GetProviderDatasetResponse> | undefined): boolean;
}

/**
 * GetProviderDatasetDownloadInformationRequest contains the ID for the dataset
 * we want to be able to download.
 *
 * @generated from message dsp.v1alpha1.GetProviderDatasetDownloadInformationRequest
 */
export declare class GetProviderDatasetDownloadInformationRequest extends Message<GetProviderDatasetDownloadInformationRequest> {
  /**
   * @generated from field: string provider_url = 1;
   */
  providerUrl: string;

  /**
   * @generated from field: string dataset_id = 2;
   */
  datasetId: string;

  constructor(data?: PartialMessage<GetProviderDatasetDownloadInformationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetProviderDatasetDownloadInformationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderDatasetDownloadInformationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderDatasetDownloadInformationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderDatasetDownloadInformationRequest;

  static equals(a: GetProviderDatasetDownloadInformationRequest | PlainMessage<GetProviderDatasetDownloadInformationRequest> | undefined, b: GetProviderDatasetDownloadInformationRequest | PlainMessage<GetProviderDatasetDownloadInformationRequest> | undefined): boolean;
}

/**
 * GetProviderDatasetDownloadInformationResponse contains the information needed
 * to download a file, including authentication etc.
 *
 * @generated from message dsp.v1alpha1.GetProviderDatasetDownloadInformationResponse
 */
export declare class GetProviderDatasetDownloadInformationResponse extends Message<GetProviderDatasetDownloadInformationResponse> {
  /**
   * @generated from field: dsp.v1alpha1.PublishInfo publish_info = 1;
   */
  publishInfo?: PublishInfo;

  /**
   * @generated from field: string transfer_id = 2;
   */
  transferId: string;

  constructor(data?: PartialMessage<GetProviderDatasetDownloadInformationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.GetProviderDatasetDownloadInformationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderDatasetDownloadInformationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderDatasetDownloadInformationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderDatasetDownloadInformationResponse;

  static equals(a: GetProviderDatasetDownloadInformationResponse | PlainMessage<GetProviderDatasetDownloadInformationResponse> | undefined, b: GetProviderDatasetDownloadInformationResponse | PlainMessage<GetProviderDatasetDownloadInformationResponse> | undefined): boolean;
}

/**
 * SignalTransferCompleteRequest is for telling the provider that we are done
 * receiving the dataset.
 *
 * @generated from message dsp.v1alpha1.SignalTransferCompleteRequest
 */
export declare class SignalTransferCompleteRequest extends Message<SignalTransferCompleteRequest> {
  /**
   * @generated from field: string transfer_id = 1;
   */
  transferId: string;

  constructor(data?: PartialMessage<SignalTransferCompleteRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferCompleteRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferCompleteRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferCompleteRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferCompleteRequest;

  static equals(a: SignalTransferCompleteRequest | PlainMessage<SignalTransferCompleteRequest> | undefined, b: SignalTransferCompleteRequest | PlainMessage<SignalTransferCompleteRequest> | undefined): boolean;
}

/**
 * SignalTransferCompleteResponse is received when we successfully sent a
 * transfer complete request.
 *
 * @generated from message dsp.v1alpha1.SignalTransferCompleteResponse
 */
export declare class SignalTransferCompleteResponse extends Message<SignalTransferCompleteResponse> {
  constructor(data?: PartialMessage<SignalTransferCompleteResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferCompleteResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferCompleteResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferCompleteResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferCompleteResponse;

  static equals(a: SignalTransferCompleteResponse | PlainMessage<SignalTransferCompleteResponse> | undefined, b: SignalTransferCompleteResponse | PlainMessage<SignalTransferCompleteResponse> | undefined): boolean;
}

/**
 * SignalTransferCancelledRequest is sent when the client wants to cancel a transfer.
 *
 * @generated from message dsp.v1alpha1.SignalTransferCancelledRequest
 */
export declare class SignalTransferCancelledRequest extends Message<SignalTransferCancelledRequest> {
  /**
   * @generated from field: string transfer_id = 1;
   */
  transferId: string;

  constructor(data?: PartialMessage<SignalTransferCancelledRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferCancelledRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferCancelledRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferCancelledRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferCancelledRequest;

  static equals(a: SignalTransferCancelledRequest | PlainMessage<SignalTransferCancelledRequest> | undefined, b: SignalTransferCancelledRequest | PlainMessage<SignalTransferCancelledRequest> | undefined): boolean;
}

/**
 * SignalTransferCancelledResponse tells that the cancellation requests was received.
 *
 * @generated from message dsp.v1alpha1.SignalTransferCancelledResponse
 */
export declare class SignalTransferCancelledResponse extends Message<SignalTransferCancelledResponse> {
  constructor(data?: PartialMessage<SignalTransferCancelledResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferCancelledResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferCancelledResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferCancelledResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferCancelledResponse;

  static equals(a: SignalTransferCancelledResponse | PlainMessage<SignalTransferCancelledResponse> | undefined, b: SignalTransferCancelledResponse | PlainMessage<SignalTransferCancelledResponse> | undefined): boolean;
}

/**
 * SignalTransferSuspendRequest is sent when the client wishes to pause the transfer.
 *
 * @generated from message dsp.v1alpha1.SignalTransferSuspendRequest
 */
export declare class SignalTransferSuspendRequest extends Message<SignalTransferSuspendRequest> {
  /**
   * @generated from field: string transfer_id = 1;
   */
  transferId: string;

  constructor(data?: PartialMessage<SignalTransferSuspendRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferSuspendRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferSuspendRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferSuspendRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferSuspendRequest;

  static equals(a: SignalTransferSuspendRequest | PlainMessage<SignalTransferSuspendRequest> | undefined, b: SignalTransferSuspendRequest | PlainMessage<SignalTransferSuspendRequest> | undefined): boolean;
}

/**
 * SignalTransferSuspendResponse tells the client that the pause request was received.
 *
 * @generated from message dsp.v1alpha1.SignalTransferSuspendResponse
 */
export declare class SignalTransferSuspendResponse extends Message<SignalTransferSuspendResponse> {
  constructor(data?: PartialMessage<SignalTransferSuspendResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferSuspendResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferSuspendResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferSuspendResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferSuspendResponse;

  static equals(a: SignalTransferSuspendResponse | PlainMessage<SignalTransferSuspendResponse> | undefined, b: SignalTransferSuspendResponse | PlainMessage<SignalTransferSuspendResponse> | undefined): boolean;
}

/**
 * SignalTransferResumeRequest tells the provider that the client wants to resume transfer.
 *
 * @generated from message dsp.v1alpha1.SignalTransferResumeRequest
 */
export declare class SignalTransferResumeRequest extends Message<SignalTransferResumeRequest> {
  /**
   * @generated from field: string transfer_id = 1;
   */
  transferId: string;

  constructor(data?: PartialMessage<SignalTransferResumeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferResumeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferResumeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferResumeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferResumeRequest;

  static equals(a: SignalTransferResumeRequest | PlainMessage<SignalTransferResumeRequest> | undefined, b: SignalTransferResumeRequest | PlainMessage<SignalTransferResumeRequest> | undefined): boolean;
}

/**
 * SignalTransferResumeResponse tells the client that the resume request was accepted.
 *
 * @generated from message dsp.v1alpha1.SignalTransferResumeResponse
 */
export declare class SignalTransferResumeResponse extends Message<SignalTransferResumeResponse> {
  constructor(data?: PartialMessage<SignalTransferResumeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dsp.v1alpha1.SignalTransferResumeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalTransferResumeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalTransferResumeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalTransferResumeResponse;

  static equals(a: SignalTransferResumeResponse | PlainMessage<SignalTransferResumeResponse> | undefined, b: SignalTransferResumeResponse | PlainMessage<SignalTransferResumeResponse> | undefined): boolean;
}

