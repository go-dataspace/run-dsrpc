// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dsp/v1alpha1/provider.proto

package dspv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProviderService_Ping_FullMethodName                      = "/dsp.v1alpha1.ProviderService/Ping"
	ProviderService_GetCatalogue_FullMethodName              = "/dsp.v1alpha1.ProviderService/GetCatalogue"
	ProviderService_GetDataset_FullMethodName                = "/dsp.v1alpha1.ProviderService/GetDataset"
	ProviderService_PublishDataset_FullMethodName            = "/dsp.v1alpha1.ProviderService/PublishDataset"
	ProviderService_UnpublishDataset_FullMethodName          = "/dsp.v1alpha1.ProviderService/UnpublishDataset"
	ProviderService_SuspendPublishedDataset_FullMethodName   = "/dsp.v1alpha1.ProviderService/SuspendPublishedDataset"
	ProviderService_UnsuspendPublishedDataset_FullMethodName = "/dsp.v1alpha1.ProviderService/UnsuspendPublishedDataset"
)

// ProviderServiceClient is the client API for ProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ProviderService is the expected grpc service that RUN-DSP will interface with.
// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
// The reason for this is that authorization will vary between dataspaces. Also, the provider
// will want to show different data dependent on the credentials.
type ProviderServiceClient interface {
	// Ping is a request to test if the provider is working, and to test the auth information.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Gets the catalogue based on the query parameters and the authorization header.
	GetCatalogue(ctx context.Context, in *GetCatalogueRequest, opts ...grpc.CallOption) (*GetCatalogueResponse, error)
	// Gets information about a single dataset.
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error)
	// Publishes a dataset,
	PublishDataset(ctx context.Context, in *PublishDatasetRequest, opts ...grpc.CallOption) (*PublishDatasetResponse, error)
	// Unpublishes a dataset.
	UnpublishDataset(ctx context.Context, in *UnpublishDatasetRequest, opts ...grpc.CallOption) (*UnpublishDatasetResponse, error)
	// Asks provider to suspend a transfer
	SuspendPublishedDataset(ctx context.Context, in *SuspendPublishedDatasetRequest, opts ...grpc.CallOption) (*SuspendPublishedDatasetResponse, error)
	// Asks provider to unsuspend (re-publish?) a transfer
	UnsuspendPublishedDataset(ctx context.Context, in *UnsuspendPublishedDatasetRequest, opts ...grpc.CallOption) (*UnsuspendPublishedDatasetResponse, error)
}

type providerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServiceClient(cc grpc.ClientConnInterface) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ProviderService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) GetCatalogue(ctx context.Context, in *GetCatalogueRequest, opts ...grpc.CallOption) (*GetCatalogueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCatalogueResponse)
	err := c.cc.Invoke(ctx, ProviderService_GetCatalogue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatasetResponse)
	err := c.cc.Invoke(ctx, ProviderService_GetDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) PublishDataset(ctx context.Context, in *PublishDatasetRequest, opts ...grpc.CallOption) (*PublishDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishDatasetResponse)
	err := c.cc.Invoke(ctx, ProviderService_PublishDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) UnpublishDataset(ctx context.Context, in *UnpublishDatasetRequest, opts ...grpc.CallOption) (*UnpublishDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpublishDatasetResponse)
	err := c.cc.Invoke(ctx, ProviderService_UnpublishDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) SuspendPublishedDataset(ctx context.Context, in *SuspendPublishedDatasetRequest, opts ...grpc.CallOption) (*SuspendPublishedDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendPublishedDatasetResponse)
	err := c.cc.Invoke(ctx, ProviderService_SuspendPublishedDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) UnsuspendPublishedDataset(ctx context.Context, in *UnsuspendPublishedDatasetRequest, opts ...grpc.CallOption) (*UnsuspendPublishedDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsuspendPublishedDatasetResponse)
	err := c.cc.Invoke(ctx, ProviderService_UnsuspendPublishedDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServiceServer is the server API for ProviderService service.
// All implementations must embed UnimplementedProviderServiceServer
// for forward compatibility.
//
// The ProviderService is the expected grpc service that RUN-DSP will interface with.
// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
// The reason for this is that authorization will vary between dataspaces. Also, the provider
// will want to show different data dependent on the credentials.
type ProviderServiceServer interface {
	// Ping is a request to test if the provider is working, and to test the auth information.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Gets the catalogue based on the query parameters and the authorization header.
	GetCatalogue(context.Context, *GetCatalogueRequest) (*GetCatalogueResponse, error)
	// Gets information about a single dataset.
	GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error)
	// Publishes a dataset,
	PublishDataset(context.Context, *PublishDatasetRequest) (*PublishDatasetResponse, error)
	// Unpublishes a dataset.
	UnpublishDataset(context.Context, *UnpublishDatasetRequest) (*UnpublishDatasetResponse, error)
	// Asks provider to suspend a transfer
	SuspendPublishedDataset(context.Context, *SuspendPublishedDatasetRequest) (*SuspendPublishedDatasetResponse, error)
	// Asks provider to unsuspend (re-publish?) a transfer
	UnsuspendPublishedDataset(context.Context, *UnsuspendPublishedDatasetRequest) (*UnsuspendPublishedDatasetResponse, error)
	mustEmbedUnimplementedProviderServiceServer()
}

// UnimplementedProviderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderServiceServer struct{}

func (UnimplementedProviderServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedProviderServiceServer) GetCatalogue(context.Context, *GetCatalogueRequest) (*GetCatalogueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogue not implemented")
}
func (UnimplementedProviderServiceServer) GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedProviderServiceServer) PublishDataset(context.Context, *PublishDatasetRequest) (*PublishDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDataset not implemented")
}
func (UnimplementedProviderServiceServer) UnpublishDataset(context.Context, *UnpublishDatasetRequest) (*UnpublishDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishDataset not implemented")
}
func (UnimplementedProviderServiceServer) SuspendPublishedDataset(context.Context, *SuspendPublishedDatasetRequest) (*SuspendPublishedDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendPublishedDataset not implemented")
}
func (UnimplementedProviderServiceServer) UnsuspendPublishedDataset(context.Context, *UnsuspendPublishedDatasetRequest) (*UnsuspendPublishedDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuspendPublishedDataset not implemented")
}
func (UnimplementedProviderServiceServer) mustEmbedUnimplementedProviderServiceServer() {}
func (UnimplementedProviderServiceServer) testEmbeddedByValue()                         {}

// UnsafeProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServiceServer will
// result in compilation errors.
type UnsafeProviderServiceServer interface {
	mustEmbedUnimplementedProviderServiceServer()
}

func RegisterProviderServiceServer(s grpc.ServiceRegistrar, srv ProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProviderService_ServiceDesc, srv)
}

func _ProviderService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_GetCatalogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetCatalogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_GetCatalogue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetCatalogue(ctx, req.(*GetCatalogueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_PublishDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).PublishDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_PublishDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).PublishDataset(ctx, req.(*PublishDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_UnpublishDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).UnpublishDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_UnpublishDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).UnpublishDataset(ctx, req.(*UnpublishDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_SuspendPublishedDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendPublishedDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).SuspendPublishedDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_SuspendPublishedDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).SuspendPublishedDataset(ctx, req.(*SuspendPublishedDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_UnsuspendPublishedDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuspendPublishedDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).UnsuspendPublishedDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_UnsuspendPublishedDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).UnsuspendPublishedDataset(ctx, req.(*UnsuspendPublishedDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderService_ServiceDesc is the grpc.ServiceDesc for ProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dsp.v1alpha1.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ProviderService_Ping_Handler,
		},
		{
			MethodName: "GetCatalogue",
			Handler:    _ProviderService_GetCatalogue_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _ProviderService_GetDataset_Handler,
		},
		{
			MethodName: "PublishDataset",
			Handler:    _ProviderService_PublishDataset_Handler,
		},
		{
			MethodName: "UnpublishDataset",
			Handler:    _ProviderService_UnpublishDataset_Handler,
		},
		{
			MethodName: "SuspendPublishedDataset",
			Handler:    _ProviderService_SuspendPublishedDataset_Handler,
		},
		{
			MethodName: "UnsuspendPublishedDataset",
			Handler:    _ProviderService_UnsuspendPublishedDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsp/v1alpha1/provider.proto",
}
