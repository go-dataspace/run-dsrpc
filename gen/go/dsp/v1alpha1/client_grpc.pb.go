// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dsp/v1alpha1/client.proto

package dspv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientService_Ping_FullMethodName                                  = "/dsp.v1alpha1.ClientService/Ping"
	ClientService_GetProviderCatalogue_FullMethodName                  = "/dsp.v1alpha1.ClientService/GetProviderCatalogue"
	ClientService_GetProviderDataset_FullMethodName                    = "/dsp.v1alpha1.ClientService/GetProviderDataset"
	ClientService_GetProviderDatasetDownloadInformation_FullMethodName = "/dsp.v1alpha1.ClientService/GetProviderDatasetDownloadInformation"
	ClientService_SignalTransferComplete_FullMethodName                = "/dsp.v1alpha1.ClientService/SignalTransferComplete"
	ClientService_SignalTransferCancelled_FullMethodName               = "/dsp.v1alpha1.ClientService/SignalTransferCancelled"
	ClientService_SignalTransferSuspend_FullMethodName                 = "/dsp.v1alpha1.ClientService/SignalTransferSuspend"
	ClientService_SignalTransferResume_FullMethodName                  = "/dsp.v1alpha1.ClientService/SignalTransferResume"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ClientService is the expected grpc service that RUN-DSP will interface with.
// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
// The reason for this is that authorization will vary between dataspaces. Also, the provider
// will want to show different data dependent on the credentials.
type ClientServiceClient interface {
	// Ping is a request to test if the provider is working, and to test the auth information.
	Ping(ctx context.Context, in *ClientServicePingRequest, opts ...grpc.CallOption) (*ClientServicePingResponse, error)
	// Gets the catalogue based on the query parameters and the authorization header.
	GetProviderCatalogue(ctx context.Context, in *GetProviderCatalogueRequest, opts ...grpc.CallOption) (*GetProviderCatalogueResponse, error)
	// Gets information about a single dataset.
	GetProviderDataset(ctx context.Context, in *GetProviderDatasetRequest, opts ...grpc.CallOption) (*GetProviderDatasetResponse, error)
	// Publishes a dataset,
	GetProviderDatasetDownloadInformation(ctx context.Context, in *GetProviderDatasetDownloadInformationRequest, opts ...grpc.CallOption) (*GetProviderDatasetDownloadInformationResponse, error)
	// Tells provider that we have finished our transfer.
	SignalTransferComplete(ctx context.Context, in *SignalTransferCompleteRequest, opts ...grpc.CallOption) (*SignalTransferCompleteResponse, error)
	// Tells provider to cancel file transfer
	SignalTransferCancelled(ctx context.Context, in *SignalTransferCancelledRequest, opts ...grpc.CallOption) (*SignalTransferCancelledResponse, error)
	// Tells provider to suspend file transfer
	SignalTransferSuspend(ctx context.Context, in *SignalTransferSuspendRequest, opts ...grpc.CallOption) (*SignalTransferSuspendResponse, error)
	// Tells provider to resume file transfer
	SignalTransferResume(ctx context.Context, in *SignalTransferResumeRequest, opts ...grpc.CallOption) (*SignalTransferResumeResponse, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) Ping(ctx context.Context, in *ClientServicePingRequest, opts ...grpc.CallOption) (*ClientServicePingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientServicePingResponse)
	err := c.cc.Invoke(ctx, ClientService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetProviderCatalogue(ctx context.Context, in *GetProviderCatalogueRequest, opts ...grpc.CallOption) (*GetProviderCatalogueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderCatalogueResponse)
	err := c.cc.Invoke(ctx, ClientService_GetProviderCatalogue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetProviderDataset(ctx context.Context, in *GetProviderDatasetRequest, opts ...grpc.CallOption) (*GetProviderDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderDatasetResponse)
	err := c.cc.Invoke(ctx, ClientService_GetProviderDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetProviderDatasetDownloadInformation(ctx context.Context, in *GetProviderDatasetDownloadInformationRequest, opts ...grpc.CallOption) (*GetProviderDatasetDownloadInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderDatasetDownloadInformationResponse)
	err := c.cc.Invoke(ctx, ClientService_GetProviderDatasetDownloadInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) SignalTransferComplete(ctx context.Context, in *SignalTransferCompleteRequest, opts ...grpc.CallOption) (*SignalTransferCompleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignalTransferCompleteResponse)
	err := c.cc.Invoke(ctx, ClientService_SignalTransferComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) SignalTransferCancelled(ctx context.Context, in *SignalTransferCancelledRequest, opts ...grpc.CallOption) (*SignalTransferCancelledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignalTransferCancelledResponse)
	err := c.cc.Invoke(ctx, ClientService_SignalTransferCancelled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) SignalTransferSuspend(ctx context.Context, in *SignalTransferSuspendRequest, opts ...grpc.CallOption) (*SignalTransferSuspendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignalTransferSuspendResponse)
	err := c.cc.Invoke(ctx, ClientService_SignalTransferSuspend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) SignalTransferResume(ctx context.Context, in *SignalTransferResumeRequest, opts ...grpc.CallOption) (*SignalTransferResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignalTransferResumeResponse)
	err := c.cc.Invoke(ctx, ClientService_SignalTransferResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility.
//
// The ClientService is the expected grpc service that RUN-DSP will interface with.
// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
// The reason for this is that authorization will vary between dataspaces. Also, the provider
// will want to show different data dependent on the credentials.
type ClientServiceServer interface {
	// Ping is a request to test if the provider is working, and to test the auth information.
	Ping(context.Context, *ClientServicePingRequest) (*ClientServicePingResponse, error)
	// Gets the catalogue based on the query parameters and the authorization header.
	GetProviderCatalogue(context.Context, *GetProviderCatalogueRequest) (*GetProviderCatalogueResponse, error)
	// Gets information about a single dataset.
	GetProviderDataset(context.Context, *GetProviderDatasetRequest) (*GetProviderDatasetResponse, error)
	// Publishes a dataset,
	GetProviderDatasetDownloadInformation(context.Context, *GetProviderDatasetDownloadInformationRequest) (*GetProviderDatasetDownloadInformationResponse, error)
	// Tells provider that we have finished our transfer.
	SignalTransferComplete(context.Context, *SignalTransferCompleteRequest) (*SignalTransferCompleteResponse, error)
	// Tells provider to cancel file transfer
	SignalTransferCancelled(context.Context, *SignalTransferCancelledRequest) (*SignalTransferCancelledResponse, error)
	// Tells provider to suspend file transfer
	SignalTransferSuspend(context.Context, *SignalTransferSuspendRequest) (*SignalTransferSuspendResponse, error)
	// Tells provider to resume file transfer
	SignalTransferResume(context.Context, *SignalTransferResumeRequest) (*SignalTransferResumeResponse, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServiceServer struct{}

func (UnimplementedClientServiceServer) Ping(context.Context, *ClientServicePingRequest) (*ClientServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClientServiceServer) GetProviderCatalogue(context.Context, *GetProviderCatalogueRequest) (*GetProviderCatalogueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderCatalogue not implemented")
}
func (UnimplementedClientServiceServer) GetProviderDataset(context.Context, *GetProviderDatasetRequest) (*GetProviderDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderDataset not implemented")
}
func (UnimplementedClientServiceServer) GetProviderDatasetDownloadInformation(context.Context, *GetProviderDatasetDownloadInformationRequest) (*GetProviderDatasetDownloadInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderDatasetDownloadInformation not implemented")
}
func (UnimplementedClientServiceServer) SignalTransferComplete(context.Context, *SignalTransferCompleteRequest) (*SignalTransferCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalTransferComplete not implemented")
}
func (UnimplementedClientServiceServer) SignalTransferCancelled(context.Context, *SignalTransferCancelledRequest) (*SignalTransferCancelledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalTransferCancelled not implemented")
}
func (UnimplementedClientServiceServer) SignalTransferSuspend(context.Context, *SignalTransferSuspendRequest) (*SignalTransferSuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalTransferSuspend not implemented")
}
func (UnimplementedClientServiceServer) SignalTransferResume(context.Context, *SignalTransferResumeRequest) (*SignalTransferResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalTransferResume not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}
func (UnimplementedClientServiceServer) testEmbeddedByValue()                       {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Ping(ctx, req.(*ClientServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetProviderCatalogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderCatalogueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetProviderCatalogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetProviderCatalogue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetProviderCatalogue(ctx, req.(*GetProviderCatalogueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetProviderDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetProviderDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetProviderDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetProviderDataset(ctx, req.(*GetProviderDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetProviderDatasetDownloadInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderDatasetDownloadInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetProviderDatasetDownloadInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetProviderDatasetDownloadInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetProviderDatasetDownloadInformation(ctx, req.(*GetProviderDatasetDownloadInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_SignalTransferComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalTransferCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SignalTransferComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_SignalTransferComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SignalTransferComplete(ctx, req.(*SignalTransferCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_SignalTransferCancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalTransferCancelledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SignalTransferCancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_SignalTransferCancelled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SignalTransferCancelled(ctx, req.(*SignalTransferCancelledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_SignalTransferSuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalTransferSuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SignalTransferSuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_SignalTransferSuspend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SignalTransferSuspend(ctx, req.(*SignalTransferSuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_SignalTransferResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalTransferResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SignalTransferResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_SignalTransferResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SignalTransferResume(ctx, req.(*SignalTransferResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dsp.v1alpha1.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ClientService_Ping_Handler,
		},
		{
			MethodName: "GetProviderCatalogue",
			Handler:    _ClientService_GetProviderCatalogue_Handler,
		},
		{
			MethodName: "GetProviderDataset",
			Handler:    _ClientService_GetProviderDataset_Handler,
		},
		{
			MethodName: "GetProviderDatasetDownloadInformation",
			Handler:    _ClientService_GetProviderDatasetDownloadInformation_Handler,
		},
		{
			MethodName: "SignalTransferComplete",
			Handler:    _ClientService_SignalTransferComplete_Handler,
		},
		{
			MethodName: "SignalTransferCancelled",
			Handler:    _ClientService_SignalTransferCancelled_Handler,
		},
		{
			MethodName: "SignalTransferSuspend",
			Handler:    _ClientService_SignalTransferSuspend_Handler,
		},
		{
			MethodName: "SignalTransferResume",
			Handler:    _ClientService_SignalTransferResume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsp/v1alpha1/client.proto",
}
