// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: dsp/v1alpha1/client.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// The ClientService is the expected grpc service that RUN-DSP will interface with.
/// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
/// The reason for this is that authorization will vary between dataspaces. Also, the provider
/// will want to show different data dependent on the credentials.
internal protocol Dsp_V1alpha1_ClientServiceClientInterface: Sendable {

    /// Ping is a request to test if the provider is working, and to test the auth information.
    @available(iOS 13, *)
    func `ping`(request: Dsp_V1alpha1_ClientServicePingRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_ClientServicePingResponse>

    /// Gets the catalogue based on the query parameters and the authorization header.
    @available(iOS 13, *)
    func `getProviderCatalogue`(request: Dsp_V1alpha1_GetProviderCatalogueRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_GetProviderCatalogueResponse>

    /// Gets information about a single dataset.
    @available(iOS 13, *)
    func `getProviderDataset`(request: Dsp_V1alpha1_GetProviderDatasetRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_GetProviderDatasetResponse>

    /// Publishes a dataset,
    @available(iOS 13, *)
    func `getProviderDatasetDownloadInformation`(request: Dsp_V1alpha1_GetProviderDatasetDownloadInformationRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_GetProviderDatasetDownloadInformationResponse>

    /// Tells provider that we have finished our transfer.
    @available(iOS 13, *)
    func `signalTransferComplete`(request: Dsp_V1alpha1_SignalTransferCompleteRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferCompleteResponse>

    /// Tells provider to cancel file transfer
    @available(iOS 13, *)
    func `signalTransferCancelled`(request: Dsp_V1alpha1_SignalTransferCancelledRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferCancelledResponse>

    /// Tells provider to suspend file transfer
    @available(iOS 13, *)
    func `signalTransferSuspend`(request: Dsp_V1alpha1_SignalTransferSuspendRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferSuspendResponse>

    /// Tells provider to resume file transfer
    @available(iOS 13, *)
    func `signalTransferResume`(request: Dsp_V1alpha1_SignalTransferResumeRequest, headers: Connect.Headers) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferResumeResponse>
}

/// Concrete implementation of `Dsp_V1alpha1_ClientServiceClientInterface`.
internal final class Dsp_V1alpha1_ClientServiceClient: Dsp_V1alpha1_ClientServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    internal init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    internal func `ping`(request: Dsp_V1alpha1_ClientServicePingRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_ClientServicePingResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/Ping", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `getProviderCatalogue`(request: Dsp_V1alpha1_GetProviderCatalogueRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_GetProviderCatalogueResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/GetProviderCatalogue", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `getProviderDataset`(request: Dsp_V1alpha1_GetProviderDatasetRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_GetProviderDatasetResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/GetProviderDataset", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `getProviderDatasetDownloadInformation`(request: Dsp_V1alpha1_GetProviderDatasetDownloadInformationRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_GetProviderDatasetDownloadInformationResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/GetProviderDatasetDownloadInformation", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `signalTransferComplete`(request: Dsp_V1alpha1_SignalTransferCompleteRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferCompleteResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/SignalTransferComplete", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `signalTransferCancelled`(request: Dsp_V1alpha1_SignalTransferCancelledRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferCancelledResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/SignalTransferCancelled", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `signalTransferSuspend`(request: Dsp_V1alpha1_SignalTransferSuspendRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferSuspendResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/SignalTransferSuspend", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `signalTransferResume`(request: Dsp_V1alpha1_SignalTransferResumeRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dsp_V1alpha1_SignalTransferResumeResponse> {
        return await self.client.unary(path: "/dsp.v1alpha1.ClientService/SignalTransferResume", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    internal enum Metadata {
        internal enum Methods {
            internal static let ping = Connect.MethodSpec(name: "Ping", service: "dsp.v1alpha1.ClientService", type: .unary)
            internal static let getProviderCatalogue = Connect.MethodSpec(name: "GetProviderCatalogue", service: "dsp.v1alpha1.ClientService", type: .unary)
            internal static let getProviderDataset = Connect.MethodSpec(name: "GetProviderDataset", service: "dsp.v1alpha1.ClientService", type: .unary)
            internal static let getProviderDatasetDownloadInformation = Connect.MethodSpec(name: "GetProviderDatasetDownloadInformation", service: "dsp.v1alpha1.ClientService", type: .unary)
            internal static let signalTransferComplete = Connect.MethodSpec(name: "SignalTransferComplete", service: "dsp.v1alpha1.ClientService", type: .unary)
            internal static let signalTransferCancelled = Connect.MethodSpec(name: "SignalTransferCancelled", service: "dsp.v1alpha1.ClientService", type: .unary)
            internal static let signalTransferSuspend = Connect.MethodSpec(name: "SignalTransferSuspend", service: "dsp.v1alpha1.ClientService", type: .unary)
            internal static let signalTransferResume = Connect.MethodSpec(name: "SignalTransferResume", service: "dsp.v1alpha1.ClientService", type: .unary)
        }
    }
}
