// @generated
// This file is @generated by prost-build.
/// Dataset represents a dataset. What exactly is in a dataset is up to the service.
/// An example of a dataset could be a file that's served, or multiple files
/// that are considered a set.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dataset {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub access_methods: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="4")]
    pub description: ::prost::alloc::vec::Vec<Multilingual>,
    #[prost(string, repeated, tag="5")]
    pub keywords: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag="6")]
    pub creator: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="7")]
    pub issued: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag="8")]
    pub modified: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(map="string, string", tag="9")]
    pub metadata: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(string, optional, tag="10")]
    pub license: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="11")]
    pub access_rights: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="12")]
    pub rights: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, tag="13")]
    pub byte_size: i64,
    #[prost(string, tag="14")]
    pub media_type: ::prost::alloc::string::String,
    #[prost(string, optional, tag="15")]
    pub format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="16")]
    pub compress_format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="17")]
    pub package_format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="18")]
    pub checksum: ::core::option::Option<Checksum>,
}
/// PublishInfo represents a published file, where to get it and its authentication details.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishInfo {
    #[prost(string, tag="1")]
    pub url: ::prost::alloc::string::String,
    #[prost(enumeration="AuthenticationType", tag="2")]
    pub authentication_type: i32,
    #[prost(string, tag="3")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub password: ::prost::alloc::string::String,
}
/// Multilingual represents a message with language metadata attached.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Multilingual {
    #[prost(string, tag="1")]
    pub value: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub language: ::prost::alloc::string::String,
}
/// Checksum represents the checksum of a dataset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Checksum {
    #[prost(string, tag="1")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub value: ::prost::alloc::string::String,
}
/// AuthenticationType represents the way to authenticate to get a published information.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthenticationType {
    Unspecified = 0,
    Bearer = 1,
    Basic = 2,
}
impl AuthenticationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AuthenticationType::Unspecified => "AUTHENTICATION_TYPE_UNSPECIFIED",
            AuthenticationType::Bearer => "AUTHENTICATION_TYPE_BEARER",
            AuthenticationType::Basic => "AUTHENTICATION_TYPE_BASIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHENTICATION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "AUTHENTICATION_TYPE_BEARER" => Some(Self::Bearer),
            "AUTHENTICATION_TYPE_BASIC" => Some(Self::Basic),
            _ => None,
        }
    }
}
/// ClientServicePingRequest is an empty message, used instead of the Empty type in case we want
/// to add parameters.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientServicePingRequest {
}
/// ClientServicePingResponse is an empty message for checking GRPC connection.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientServicePingResponse {
}
/// GetProviderCatalogueRequest represents the parameters for the GetProviderCatalogue request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProviderCatalogueRequest {
    /// query_parameters is just a key/value map. These are not specified in the dataspace standard.
    /// RUN-DSP also does not define them yet, so for now this is a placeholder.
    #[prost(string, tag="1")]
    pub provider_uri: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="2")]
    pub query_parameters: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// GetProviderCatalogueResponse returns all the datasets matched by GetProviderCatalogue.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProviderCatalogueResponse {
    #[prost(message, repeated, tag="1")]
    pub datasets: ::prost::alloc::vec::Vec<Dataset>,
}
/// GetProviderDatasetRequest contains the dataset ID.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProviderDatasetRequest {
    #[prost(string, tag="1")]
    pub provider_url: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub dataset_id: ::prost::alloc::string::String,
}
/// GetProviderDatasetResponse contains the requested dataset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProviderDatasetResponse {
    #[prost(string, tag="1")]
    pub provider_url: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub dataset: ::core::option::Option<Dataset>,
}
/// GetProviderDatasetDownloadInformationRequest contains the ID for the dataset
/// we want to be able to download.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProviderDatasetDownloadInformationRequest {
    #[prost(string, tag="1")]
    pub provider_url: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub dataset_id: ::prost::alloc::string::String,
}
/// GetProviderDatasetDownloadInformationResponse contains the information needed
/// to download a file, including authentication etc.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProviderDatasetDownloadInformationResponse {
    #[prost(message, optional, tag="1")]
    pub publish_info: ::core::option::Option<PublishInfo>,
    #[prost(string, tag="2")]
    pub transfer_id: ::prost::alloc::string::String,
}
/// SignalTransferCompleteRequest is for telling the provider that we are done
/// receiving the dataset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignalTransferCompleteRequest {
    #[prost(string, tag="1")]
    pub transfer_id: ::prost::alloc::string::String,
}
/// SignalTransferCompleteResponse is received when we successfully sent a
/// transfer complete request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignalTransferCompleteResponse {
}
/// SignalTransferCancelledRequest is sent when the client wants to cancel a transfer.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignalTransferCancelledRequest {
    #[prost(string, tag="1")]
    pub transfer_id: ::prost::alloc::string::String,
}
/// SignalTransferCancelledResponse tells that the cancellation requests was received.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignalTransferCancelledResponse {
}
/// SignalTransferSuspendRequest is sent when the client wishes to pause the transfer.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignalTransferSuspendRequest {
    #[prost(string, tag="1")]
    pub transfer_id: ::prost::alloc::string::String,
}
/// SignalTransferSuspendResponse tells the client that the pause request was received.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignalTransferSuspendResponse {
}
/// SignalTransferResumeRequest tells the provider that the client wants to resume transfer.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignalTransferResumeRequest {
    #[prost(string, tag="1")]
    pub transfer_id: ::prost::alloc::string::String,
}
/// SignalTransferResumeResponse tells the client that the resume request was accepted.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignalTransferResumeResponse {
}
/// PingRequest is an empty message, used instead of the Empty type in case we want
/// to add parameters.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PingRequest {
}
/// PingResponse contains infomational data about the provider.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingResponse {
    #[prost(string, tag="1")]
    pub provider_name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub provider_description: ::prost::alloc::string::String,
    #[prost(bool, tag="3")]
    pub authenticated: bool,
    /// An ID for the data service, can be any uuid as long as it's consistent.
    #[prost(string, tag="4")]
    pub dataservice_id: ::prost::alloc::string::String,
    /// dataservice URL where data is downloaded from.
    #[prost(string, tag="5")]
    pub dataservice_url: ::prost::alloc::string::String,
}
/// GetCatalogRequest represents the parameters for the GetCatalog call.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCatalogueRequest {
    /// query_parameters is just a key/value map. These are not specified in the dataspace standard.
    /// RUN-DSP also does not define them yet, so for now this is a placeholder.
    #[prost(map="string, string", tag="1")]
    pub query_parameters: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// GetCatalogueResponse returns all the datasets matched by GetCatalogue.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCatalogueResponse {
    #[prost(message, repeated, tag="1")]
    pub datasets: ::prost::alloc::vec::Vec<Dataset>,
}
/// GetDatasetRequest contains the dataset ID.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDatasetRequest {
    #[prost(string, tag="1")]
    pub dataset_id: ::prost::alloc::string::String,
}
/// GetDatasetResponse contains the requested dataset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDatasetResponse {
    #[prost(message, optional, tag="1")]
    pub dataset: ::core::option::Option<Dataset>,
}
/// PublishDatasetRequest contains the ID for the dataset, and a publish ID that's specific to
/// this publish instance. A dataset can be published many concurrent times with different credentials.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishDatasetRequest {
    #[prost(string, tag="1")]
    pub dataset_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub publish_id: ::prost::alloc::string::String,
}
/// PublishDatasetResponse contains the publish information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishDatasetResponse {
    #[prost(message, optional, tag="1")]
    pub publish_info: ::core::option::Option<PublishInfo>,
}
/// UnpublishDatasetRequest contains the publish ID of the published dataset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnpublishDatasetRequest {
    #[prost(string, tag="1")]
    pub publish_id: ::prost::alloc::string::String,
}
/// UnpublishDatasetResponse contains a boolean indicating success.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnpublishDatasetResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
/// SuspendPublishedDatasetRequest contains the publish ID of the published dataset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SuspendPublishedDatasetRequest {
    #[prost(string, tag="1")]
    pub publish_id: ::prost::alloc::string::String,
}
/// SuspendPublshedDatasetResponse indicates success
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SuspendPublishedDatasetResponse {
}
/// UnsuspendPublishedDataset contains the publish ID of the published dataset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnsuspendPublishedDatasetRequest {
    #[prost(string, tag="1")]
    pub publish_id: ::prost::alloc::string::String,
}
/// UnsuspendPublishedDatasetResponse indicates success
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnsuspendPublishedDatasetResponse {
}
// @@protoc_insertion_point(module)
