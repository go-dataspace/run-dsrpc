// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: dsp/v1alpha1/types.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.dsp.v1alpha1;

@kotlin.jvm.JvmName("-initializemultilingual")
public inline fun multilingual(block: com.dsp.v1alpha1.MultilingualKt.Dsl.() -> kotlin.Unit): com.dsp.v1alpha1.Multilingual =
  com.dsp.v1alpha1.MultilingualKt.Dsl._create(com.dsp.v1alpha1.Multilingual.newBuilder()).apply { block() }._build()
/**
 * ```
 * Multilingual represents a message with language metadata attached.
 * ```
 *
 * Protobuf type `dsp.v1alpha1.Multilingual`
 */
public object MultilingualKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.dsp.v1alpha1.Multilingual.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dsp.v1alpha1.Multilingual.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dsp.v1alpha1.Multilingual = _builder.build()

    /**
     * `string value = 1 [json_name = "value"];`
     */
    public var value: kotlin.String
      @JvmName("getValue")
      get() = _builder.getValue()
      @JvmName("setValue")
      set(value) {
        _builder.setValue(value)
      }
    /**
     * `string value = 1 [json_name = "value"];`
     */
    public fun clearValue() {
      _builder.clearValue()
    }

    /**
     * `string language = 2 [json_name = "language"];`
     */
    public var language: kotlin.String
      @JvmName("getLanguage")
      get() = _builder.getLanguage()
      @JvmName("setLanguage")
      set(value) {
        _builder.setLanguage(value)
      }
    /**
     * `string language = 2 [json_name = "language"];`
     */
    public fun clearLanguage() {
      _builder.clearLanguage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.dsp.v1alpha1.Multilingual.copy(block: `com.dsp.v1alpha1`.MultilingualKt.Dsl.() -> kotlin.Unit): com.dsp.v1alpha1.Multilingual =
  `com.dsp.v1alpha1`.MultilingualKt.Dsl._create(this.toBuilder()).apply { block() }._build()

