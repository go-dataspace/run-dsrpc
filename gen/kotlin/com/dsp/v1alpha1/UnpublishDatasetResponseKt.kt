// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: dsp/v1alpha1/provider.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.dsp.v1alpha1;

@kotlin.jvm.JvmName("-initializeunpublishDatasetResponse")
public inline fun unpublishDatasetResponse(block: com.dsp.v1alpha1.UnpublishDatasetResponseKt.Dsl.() -> kotlin.Unit): com.dsp.v1alpha1.UnpublishDatasetResponse =
  com.dsp.v1alpha1.UnpublishDatasetResponseKt.Dsl._create(com.dsp.v1alpha1.UnpublishDatasetResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * UnpublishDatasetResponse contains a boolean indicating success.
 * ```
 *
 * Protobuf type `dsp.v1alpha1.UnpublishDatasetResponse`
 */
public object UnpublishDatasetResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.dsp.v1alpha1.UnpublishDatasetResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dsp.v1alpha1.UnpublishDatasetResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dsp.v1alpha1.UnpublishDatasetResponse = _builder.build()

    /**
     * `bool success = 1 [json_name = "success"];`
     */
    public var success: kotlin.Boolean
      @JvmName("getSuccess")
      get() = _builder.getSuccess()
      @JvmName("setSuccess")
      set(value) {
        _builder.setSuccess(value)
      }
    /**
     * `bool success = 1 [json_name = "success"];`
     */
    public fun clearSuccess() {
      _builder.clearSuccess()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.dsp.v1alpha1.UnpublishDatasetResponse.copy(block: `com.dsp.v1alpha1`.UnpublishDatasetResponseKt.Dsl.() -> kotlin.Unit): com.dsp.v1alpha1.UnpublishDatasetResponse =
  `com.dsp.v1alpha1`.UnpublishDatasetResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

