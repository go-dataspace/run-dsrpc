// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: dsp/v1alpha1/provider.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.dsp.v1alpha1;

@kotlin.jvm.JvmName("-initializepublishDatasetRequest")
public inline fun publishDatasetRequest(block: com.dsp.v1alpha1.PublishDatasetRequestKt.Dsl.() -> kotlin.Unit): com.dsp.v1alpha1.PublishDatasetRequest =
  com.dsp.v1alpha1.PublishDatasetRequestKt.Dsl._create(com.dsp.v1alpha1.PublishDatasetRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * PublishDatasetRequest contains the ID for the dataset, and a publish ID that's specific to
 * this publish instance. A dataset can be published many concurrent times with different credentials.
 * ```
 *
 * Protobuf type `dsp.v1alpha1.PublishDatasetRequest`
 */
public object PublishDatasetRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.dsp.v1alpha1.PublishDatasetRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dsp.v1alpha1.PublishDatasetRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dsp.v1alpha1.PublishDatasetRequest = _builder.build()

    /**
     * `string dataset_id = 1 [json_name = "datasetId"];`
     */
    public var datasetId: kotlin.String
      @JvmName("getDatasetId")
      get() = _builder.getDatasetId()
      @JvmName("setDatasetId")
      set(value) {
        _builder.setDatasetId(value)
      }
    /**
     * `string dataset_id = 1 [json_name = "datasetId"];`
     */
    public fun clearDatasetId() {
      _builder.clearDatasetId()
    }

    /**
     * `string publish_id = 2 [json_name = "publishId"];`
     */
    public var publishId: kotlin.String
      @JvmName("getPublishId")
      get() = _builder.getPublishId()
      @JvmName("setPublishId")
      set(value) {
        _builder.setPublishId(value)
      }
    /**
     * `string publish_id = 2 [json_name = "publishId"];`
     */
    public fun clearPublishId() {
      _builder.clearPublishId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.dsp.v1alpha1.PublishDatasetRequest.copy(block: `com.dsp.v1alpha1`.PublishDatasetRequestKt.Dsl.() -> kotlin.Unit): com.dsp.v1alpha1.PublishDatasetRequest =
  `com.dsp.v1alpha1`.PublishDatasetRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

