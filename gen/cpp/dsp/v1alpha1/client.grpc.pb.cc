// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dsp/v1alpha1/client.proto

#include "dsp/v1alpha1/client.pb.h"
#include "dsp/v1alpha1/client.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dsp {
namespace v1alpha1 {

static const char* ClientService_method_names[] = {
  "/dsp.v1alpha1.ClientService/Ping",
  "/dsp.v1alpha1.ClientService/GetProviderCatalogue",
  "/dsp.v1alpha1.ClientService/GetProviderDataset",
  "/dsp.v1alpha1.ClientService/GetProviderDatasetDownloadInformation",
  "/dsp.v1alpha1.ClientService/SignalTransferComplete",
  "/dsp.v1alpha1.ClientService/SignalTransferCancelled",
  "/dsp.v1alpha1.ClientService/SignalTransferSuspend",
  "/dsp.v1alpha1.ClientService/SignalTransferResume",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel, options));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(ClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProviderCatalogue_(ClientService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProviderDataset_(ClientService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProviderDatasetDownloadInformation_(ClientService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignalTransferComplete_(ClientService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignalTransferCancelled_(ClientService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignalTransferSuspend_(ClientService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignalTransferResume_(ClientService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::dsp::v1alpha1::ClientServicePingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void ClientService::Stub::async::Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>* ClientService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::ClientServicePingResponse, ::dsp::v1alpha1::ClientServicePingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>* ClientService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProviderCatalogue_, context, request, response);
}

void ClientService::Stub::async::GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProviderCatalogue_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProviderCatalogue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>* ClientService::Stub::PrepareAsyncGetProviderCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::GetProviderCatalogueResponse, ::dsp::v1alpha1::GetProviderCatalogueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProviderCatalogue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>* ClientService::Stub::AsyncGetProviderCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProviderCatalogueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::dsp::v1alpha1::GetProviderDatasetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProviderDataset_, context, request, response);
}

void ClientService::Stub::async::GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProviderDataset_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProviderDataset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>* ClientService::Stub::PrepareAsyncGetProviderDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::GetProviderDatasetResponse, ::dsp::v1alpha1::GetProviderDatasetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProviderDataset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>* ClientService::Stub::AsyncGetProviderDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProviderDatasetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProviderDatasetDownloadInformation_, context, request, response);
}

void ClientService::Stub::async::GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProviderDatasetDownloadInformation_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProviderDatasetDownloadInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* ClientService::Stub::PrepareAsyncGetProviderDatasetDownloadInformationRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProviderDatasetDownloadInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* ClientService::Stub::AsyncGetProviderDatasetDownloadInformationRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProviderDatasetDownloadInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignalTransferComplete_, context, request, response);
}

void ClientService::Stub::async::SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferComplete_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferComplete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>* ClientService::Stub::PrepareAsyncSignalTransferCompleteRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::SignalTransferCompleteResponse, ::dsp::v1alpha1::SignalTransferCompleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignalTransferComplete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>* ClientService::Stub::AsyncSignalTransferCompleteRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignalTransferCompleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignalTransferCancelled_, context, request, response);
}

void ClientService::Stub::async::SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferCancelled_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferCancelled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>* ClientService::Stub::PrepareAsyncSignalTransferCancelledRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::SignalTransferCancelledResponse, ::dsp::v1alpha1::SignalTransferCancelledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignalTransferCancelled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>* ClientService::Stub::AsyncSignalTransferCancelledRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignalTransferCancelledRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignalTransferSuspend_, context, request, response);
}

void ClientService::Stub::async::SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferSuspend_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferSuspend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>* ClientService::Stub::PrepareAsyncSignalTransferSuspendRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::SignalTransferSuspendResponse, ::dsp::v1alpha1::SignalTransferSuspendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignalTransferSuspend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>* ClientService::Stub::AsyncSignalTransferSuspendRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignalTransferSuspendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::dsp::v1alpha1::SignalTransferResumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignalTransferResume_, context, request, response);
}

void ClientService::Stub::async::SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferResume_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalTransferResume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>* ClientService::Stub::PrepareAsyncSignalTransferResumeRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::SignalTransferResumeResponse, ::dsp::v1alpha1::SignalTransferResumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignalTransferResume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>* ClientService::Stub::AsyncSignalTransferResumeRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignalTransferResumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::ClientServicePingRequest* req,
             ::dsp::v1alpha1::ClientServicePingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::GetProviderCatalogueRequest* req,
             ::dsp::v1alpha1::GetProviderCatalogueResponse* resp) {
               return service->GetProviderCatalogue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::GetProviderDatasetRequest* req,
             ::dsp::v1alpha1::GetProviderDatasetResponse* resp) {
               return service->GetProviderDataset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* req,
             ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* resp) {
               return service->GetProviderDatasetDownloadInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::SignalTransferCompleteRequest* req,
             ::dsp::v1alpha1::SignalTransferCompleteResponse* resp) {
               return service->SignalTransferComplete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::SignalTransferCancelledRequest* req,
             ::dsp::v1alpha1::SignalTransferCancelledResponse* resp) {
               return service->SignalTransferCancelled(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::SignalTransferSuspendRequest* req,
             ::dsp::v1alpha1::SignalTransferSuspendResponse* resp) {
               return service->SignalTransferSuspend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::SignalTransferResumeRequest* req,
             ::dsp::v1alpha1::SignalTransferResumeResponse* resp) {
               return service->SignalTransferResume(ctx, req, resp);
             }, this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::Ping(::grpc::ServerContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::GetProviderCatalogue(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::GetProviderDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::GetProviderDatasetDownloadInformation(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SignalTransferComplete(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SignalTransferCancelled(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SignalTransferSuspend(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SignalTransferResume(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dsp
}  // namespace v1alpha1

