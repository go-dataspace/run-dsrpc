// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dsp/v1alpha1/provider.proto

#include "dsp/v1alpha1/provider.pb.h"
#include "dsp/v1alpha1/provider.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dsp {
namespace v1alpha1 {

static const char* ProviderService_method_names[] = {
  "/dsp.v1alpha1.ProviderService/Ping",
  "/dsp.v1alpha1.ProviderService/GetCatalogue",
  "/dsp.v1alpha1.ProviderService/GetDataset",
  "/dsp.v1alpha1.ProviderService/PublishDataset",
  "/dsp.v1alpha1.ProviderService/UnpublishDataset",
  "/dsp.v1alpha1.ProviderService/SuspendPublishedDataset",
  "/dsp.v1alpha1.ProviderService/UnsuspendPublishedDataset",
};

std::unique_ptr< ProviderService::Stub> ProviderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProviderService::Stub> stub(new ProviderService::Stub(channel, options));
  return stub;
}

ProviderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(ProviderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCatalogue_(ProviderService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataset_(ProviderService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublishDataset_(ProviderService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnpublishDataset_(ProviderService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SuspendPublishedDataset_(ProviderService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnsuspendPublishedDataset_(ProviderService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProviderService::Stub::Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::dsp::v1alpha1::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void ProviderService::Stub::async::Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void ProviderService::Stub::async::Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>* ProviderService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::PingResponse, ::dsp::v1alpha1::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>* ProviderService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProviderService::Stub::GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::dsp::v1alpha1::GetCatalogueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCatalogue_, context, request, response);
}

void ProviderService::Stub::async::GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCatalogue_, context, request, response, std::move(f));
}

void ProviderService::Stub::async::GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCatalogue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>* ProviderService::Stub::PrepareAsyncGetCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::GetCatalogueResponse, ::dsp::v1alpha1::GetCatalogueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCatalogue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>* ProviderService::Stub::AsyncGetCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCatalogueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProviderService::Stub::GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::dsp::v1alpha1::GetDatasetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDataset_, context, request, response);
}

void ProviderService::Stub::async::GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataset_, context, request, response, std::move(f));
}

void ProviderService::Stub::async::GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>* ProviderService::Stub::PrepareAsyncGetDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::GetDatasetResponse, ::dsp::v1alpha1::GetDatasetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDataset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>* ProviderService::Stub::AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDatasetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProviderService::Stub::PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::dsp::v1alpha1::PublishDatasetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishDataset_, context, request, response);
}

void ProviderService::Stub::async::PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishDataset_, context, request, response, std::move(f));
}

void ProviderService::Stub::async::PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishDataset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>* ProviderService::Stub::PrepareAsyncPublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::PublishDatasetResponse, ::dsp::v1alpha1::PublishDatasetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishDataset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>* ProviderService::Stub::AsyncPublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishDatasetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProviderService::Stub::UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::dsp::v1alpha1::UnpublishDatasetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnpublishDataset_, context, request, response);
}

void ProviderService::Stub::async::UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnpublishDataset_, context, request, response, std::move(f));
}

void ProviderService::Stub::async::UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnpublishDataset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>* ProviderService::Stub::PrepareAsyncUnpublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::UnpublishDatasetResponse, ::dsp::v1alpha1::UnpublishDatasetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnpublishDataset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>* ProviderService::Stub::AsyncUnpublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnpublishDatasetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProviderService::Stub::SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SuspendPublishedDataset_, context, request, response);
}

void ProviderService::Stub::async::SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuspendPublishedDataset_, context, request, response, std::move(f));
}

void ProviderService::Stub::async::SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuspendPublishedDataset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* ProviderService::Stub::PrepareAsyncSuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::SuspendPublishedDatasetResponse, ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SuspendPublishedDataset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* ProviderService::Stub::AsyncSuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSuspendPublishedDatasetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProviderService::Stub::UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnsuspendPublishedDataset_, context, request, response);
}

void ProviderService::Stub::async::UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnsuspendPublishedDataset_, context, request, response, std::move(f));
}

void ProviderService::Stub::async::UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnsuspendPublishedDataset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* ProviderService::Stub::PrepareAsyncUnsuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse, ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnsuspendPublishedDataset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* ProviderService::Stub::AsyncUnsuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnsuspendPublishedDatasetRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProviderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProviderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::PingRequest* req,
             ::dsp::v1alpha1::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProviderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::GetCatalogueRequest* req,
             ::dsp::v1alpha1::GetCatalogueResponse* resp) {
               return service->GetCatalogue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProviderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::GetDatasetRequest* req,
             ::dsp::v1alpha1::GetDatasetResponse* resp) {
               return service->GetDataset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProviderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::PublishDatasetRequest* req,
             ::dsp::v1alpha1::PublishDatasetResponse* resp) {
               return service->PublishDataset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProviderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::UnpublishDatasetRequest* req,
             ::dsp::v1alpha1::UnpublishDatasetResponse* resp) {
               return service->UnpublishDataset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProviderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* req,
             ::dsp::v1alpha1::SuspendPublishedDatasetResponse* resp) {
               return service->SuspendPublishedDataset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProviderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* req,
             ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* resp) {
               return service->UnsuspendPublishedDataset(ctx, req, resp);
             }, this)));
}

ProviderService::Service::~Service() {
}

::grpc::Status ProviderService::Service::Ping(::grpc::ServerContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::GetCatalogue(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::GetDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::PublishDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::UnpublishDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::SuspendPublishedDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::UnsuspendPublishedDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dsp
}  // namespace v1alpha1

