// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dsp/v1alpha1/provider.proto
// Original file comments:
// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_dsp_2fv1alpha1_2fprovider_2eproto__INCLUDED
#define GRPC_dsp_2fv1alpha1_2fprovider_2eproto__INCLUDED

#include "dsp/v1alpha1/provider.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace dsp {
namespace v1alpha1 {

// The ProviderService is the expected grpc service that RUN-DSP will interface with.
// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
// The reason for this is that authorization will vary between dataspaces. Also, the provider
// will want to show different data dependent on the credentials.
class ProviderService final {
 public:
  static constexpr char const* service_full_name() {
    return "dsp.v1alpha1.ProviderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Ping is a request to test if the provider is working, and to test the auth information.
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::dsp::v1alpha1::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    // Gets the catalogue based on the query parameters and the authorization header.
    virtual ::grpc::Status GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::dsp::v1alpha1::GetCatalogueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetCatalogueResponse>> AsyncGetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetCatalogueResponse>>(AsyncGetCatalogueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetCatalogueResponse>> PrepareAsyncGetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetCatalogueResponse>>(PrepareAsyncGetCatalogueRaw(context, request, cq));
    }
    // Gets information about a single dataset.
    virtual ::grpc::Status GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::dsp::v1alpha1::GetDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetDatasetResponse>> AsyncGetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetDatasetResponse>>(AsyncGetDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetDatasetResponse>> PrepareAsyncGetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetDatasetResponse>>(PrepareAsyncGetDatasetRaw(context, request, cq));
    }
    // Publishes a dataset,
    virtual ::grpc::Status PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::dsp::v1alpha1::PublishDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PublishDatasetResponse>> AsyncPublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PublishDatasetResponse>>(AsyncPublishDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PublishDatasetResponse>> PrepareAsyncPublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PublishDatasetResponse>>(PrepareAsyncPublishDatasetRaw(context, request, cq));
    }
    // Unpublishes a dataset.
    virtual ::grpc::Status UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::dsp::v1alpha1::UnpublishDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnpublishDatasetResponse>> AsyncUnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnpublishDatasetResponse>>(AsyncUnpublishDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnpublishDatasetResponse>> PrepareAsyncUnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnpublishDatasetResponse>>(PrepareAsyncUnpublishDatasetRaw(context, request, cq));
    }
    // Asks provider to suspend a transfer
    virtual ::grpc::Status SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>> AsyncSuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>>(AsyncSuspendPublishedDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>> PrepareAsyncSuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>>(PrepareAsyncSuspendPublishedDatasetRaw(context, request, cq));
    }
    // Asks provider to unsuspend (re-publish?) a transfer
    virtual ::grpc::Status UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>> AsyncUnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>>(AsyncUnsuspendPublishedDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>> PrepareAsyncUnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>>(PrepareAsyncUnsuspendPublishedDatasetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Ping is a request to test if the provider is working, and to test the auth information.
      virtual void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the catalogue based on the query parameters and the authorization header.
      virtual void GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets information about a single dataset.
      virtual void GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Publishes a dataset,
      virtual void PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Unpublishes a dataset.
      virtual void UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Asks provider to suspend a transfer
      virtual void SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Asks provider to unsuspend (re-publish?) a transfer
      virtual void UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetCatalogueResponse>* AsyncGetCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetCatalogueResponse>* PrepareAsyncGetCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetDatasetResponse>* AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetDatasetResponse>* PrepareAsyncGetDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PublishDatasetResponse>* AsyncPublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::PublishDatasetResponse>* PrepareAsyncPublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnpublishDatasetResponse>* AsyncUnpublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnpublishDatasetResponse>* PrepareAsyncUnpublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* AsyncSuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* PrepareAsyncSuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* AsyncUnsuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* PrepareAsyncUnsuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::dsp::v1alpha1::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::dsp::v1alpha1::GetCatalogueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>> AsyncGetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>>(AsyncGetCatalogueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>> PrepareAsyncGetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>>(PrepareAsyncGetCatalogueRaw(context, request, cq));
    }
    ::grpc::Status GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::dsp::v1alpha1::GetDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>> AsyncGetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>>(AsyncGetDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>> PrepareAsyncGetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>>(PrepareAsyncGetDatasetRaw(context, request, cq));
    }
    ::grpc::Status PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::dsp::v1alpha1::PublishDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>> AsyncPublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>>(AsyncPublishDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>> PrepareAsyncPublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>>(PrepareAsyncPublishDatasetRaw(context, request, cq));
    }
    ::grpc::Status UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::dsp::v1alpha1::UnpublishDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>> AsyncUnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>>(AsyncUnpublishDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>> PrepareAsyncUnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>>(PrepareAsyncUnpublishDatasetRaw(context, request, cq));
    }
    ::grpc::Status SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>> AsyncSuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>>(AsyncSuspendPublishedDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>> PrepareAsyncSuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>>(PrepareAsyncSuspendPublishedDatasetRaw(context, request, cq));
    }
    ::grpc::Status UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>> AsyncUnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>>(AsyncUnsuspendPublishedDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>> PrepareAsyncUnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>>(PrepareAsyncUnsuspendPublishedDatasetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void PublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void UnpublishDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void SuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void UnsuspendPublishedDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>* AsyncGetCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetCatalogueResponse>* PrepareAsyncGetCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetCatalogueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>* AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetDatasetResponse>* PrepareAsyncGetDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>* AsyncPublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::PublishDatasetResponse>* PrepareAsyncPublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::PublishDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>* AsyncUnpublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnpublishDatasetResponse>* PrepareAsyncUnpublishDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* AsyncSuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* PrepareAsyncSuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* AsyncUnsuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* PrepareAsyncUnsuspendPublishedDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCatalogue_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataset_;
    const ::grpc::internal::RpcMethod rpcmethod_PublishDataset_;
    const ::grpc::internal::RpcMethod rpcmethod_UnpublishDataset_;
    const ::grpc::internal::RpcMethod rpcmethod_SuspendPublishedDataset_;
    const ::grpc::internal::RpcMethod rpcmethod_UnsuspendPublishedDataset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Ping is a request to test if the provider is working, and to test the auth information.
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response);
    // Gets the catalogue based on the query parameters and the authorization header.
    virtual ::grpc::Status GetCatalogue(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response);
    // Gets information about a single dataset.
    virtual ::grpc::Status GetDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response);
    // Publishes a dataset,
    virtual ::grpc::Status PublishDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response);
    // Unpublishes a dataset.
    virtual ::grpc::Status UnpublishDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response);
    // Asks provider to suspend a transfer
    virtual ::grpc::Status SuspendPublishedDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response);
    // Asks provider to unsuspend (re-publish?) a transfer
    virtual ::grpc::Status UnsuspendPublishedDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PingRequest* /*request*/, ::dsp::v1alpha1::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::dsp::v1alpha1::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCatalogue() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCatalogue(::grpc::ServerContext* context, ::dsp::v1alpha1::GetCatalogueRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::GetCatalogueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetDatasetRequest* /*request*/, ::dsp::v1alpha1::GetDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataset(::grpc::ServerContext* context, ::dsp::v1alpha1::GetDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::GetDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishDataset() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PublishDatasetRequest* /*request*/, ::dsp::v1alpha1::PublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishDataset(::grpc::ServerContext* context, ::dsp::v1alpha1::PublishDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::PublishDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnpublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnpublishDataset() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UnpublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnpublishDatasetRequest* /*request*/, ::dsp::v1alpha1::UnpublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnpublishDataset(::grpc::ServerContext* context, ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::UnpublishDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SuspendPublishedDataset() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuspendPublishedDataset(::grpc::ServerContext* context, ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnsuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnsuspendPublishedDataset() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UnsuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnsuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsuspendPublishedDataset(::grpc::ServerContext* context, ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_GetCatalogue<WithAsyncMethod_GetDataset<WithAsyncMethod_PublishDataset<WithAsyncMethod_UnpublishDataset<WithAsyncMethod_SuspendPublishedDataset<WithAsyncMethod_UnsuspendPublishedDataset<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::PingRequest* request, ::dsp::v1alpha1::PingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PingRequest* /*request*/, ::dsp::v1alpha1::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::PingRequest* /*request*/, ::dsp::v1alpha1::PingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCatalogue() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::GetCatalogueRequest* request, ::dsp::v1alpha1::GetCatalogueResponse* response) { return this->GetCatalogue(context, request, response); }));}
    void SetMessageAllocatorFor_GetCatalogue(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCatalogue(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::GetCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetCatalogueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDataset() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::GetDatasetRequest* request, ::dsp::v1alpha1::GetDatasetResponse* response) { return this->GetDataset(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataset(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetDatasetRequest* /*request*/, ::dsp::v1alpha1::GetDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::GetDatasetRequest* /*request*/, ::dsp::v1alpha1::GetDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublishDataset() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::PublishDatasetRequest* request, ::dsp::v1alpha1::PublishDatasetResponse* response) { return this->PublishDataset(context, request, response); }));}
    void SetMessageAllocatorFor_PublishDataset(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PublishDatasetRequest* /*request*/, ::dsp::v1alpha1::PublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::PublishDatasetRequest* /*request*/, ::dsp::v1alpha1::PublishDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnpublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnpublishDataset() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::UnpublishDatasetRequest* request, ::dsp::v1alpha1::UnpublishDatasetResponse* response) { return this->UnpublishDataset(context, request, response); }));}
    void SetMessageAllocatorFor_UnpublishDataset(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnpublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnpublishDatasetRequest* /*request*/, ::dsp::v1alpha1::UnpublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnpublishDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::UnpublishDatasetRequest* /*request*/, ::dsp::v1alpha1::UnpublishDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SuspendPublishedDataset() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* response) { return this->SuspendPublishedDataset(context, request, response); }));}
    void SetMessageAllocatorFor_SuspendPublishedDataset(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuspendPublishedDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnsuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnsuspendPublishedDataset() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* request, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* response) { return this->UnsuspendPublishedDataset(context, request, response); }));}
    void SetMessageAllocatorFor_UnsuspendPublishedDataset(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnsuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnsuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnsuspendPublishedDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Ping<WithCallbackMethod_GetCatalogue<WithCallbackMethod_GetDataset<WithCallbackMethod_PublishDataset<WithCallbackMethod_UnpublishDataset<WithCallbackMethod_SuspendPublishedDataset<WithCallbackMethod_UnsuspendPublishedDataset<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PingRequest* /*request*/, ::dsp::v1alpha1::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCatalogue() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetDatasetRequest* /*request*/, ::dsp::v1alpha1::GetDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishDataset() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PublishDatasetRequest* /*request*/, ::dsp::v1alpha1::PublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnpublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnpublishDataset() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UnpublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnpublishDatasetRequest* /*request*/, ::dsp::v1alpha1::UnpublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SuspendPublishedDataset() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnsuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnsuspendPublishedDataset() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UnsuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnsuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PingRequest* /*request*/, ::dsp::v1alpha1::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCatalogue() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCatalogue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataset() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetDatasetRequest* /*request*/, ::dsp::v1alpha1::GetDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishDataset() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PublishDatasetRequest* /*request*/, ::dsp::v1alpha1::PublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnpublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnpublishDataset() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UnpublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnpublishDatasetRequest* /*request*/, ::dsp::v1alpha1::UnpublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnpublishDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SuspendPublishedDataset() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuspendPublishedDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnsuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnsuspendPublishedDataset() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UnsuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnsuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsuspendPublishedDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PingRequest* /*request*/, ::dsp::v1alpha1::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCatalogue() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCatalogue(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCatalogue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDataset() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataset(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetDatasetRequest* /*request*/, ::dsp::v1alpha1::GetDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublishDataset() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublishDataset(context, request, response); }));
    }
    ~WithRawCallbackMethod_PublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PublishDatasetRequest* /*request*/, ::dsp::v1alpha1::PublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnpublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnpublishDataset() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnpublishDataset(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnpublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnpublishDatasetRequest* /*request*/, ::dsp::v1alpha1::UnpublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnpublishDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SuspendPublishedDataset() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SuspendPublishedDataset(context, request, response); }));
    }
    ~WithRawCallbackMethod_SuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuspendPublishedDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnsuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnsuspendPublishedDataset() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnsuspendPublishedDataset(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnsuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnsuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnsuspendPublishedDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::PingRequest, ::dsp::v1alpha1::PingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PingRequest* /*request*/, ::dsp::v1alpha1::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::PingRequest,::dsp::v1alpha1::PingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCatalogue() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::GetCatalogueRequest, ::dsp::v1alpha1::GetCatalogueResponse>* streamer) {
                       return this->StreamedGetCatalogue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCatalogue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::GetCatalogueRequest,::dsp::v1alpha1::GetCatalogueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::GetDatasetRequest, ::dsp::v1alpha1::GetDatasetResponse>* streamer) {
                       return this->StreamedGetDataset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetDatasetRequest* /*request*/, ::dsp::v1alpha1::GetDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::GetDatasetRequest,::dsp::v1alpha1::GetDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublishDataset() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::PublishDatasetRequest, ::dsp::v1alpha1::PublishDatasetResponse>* streamer) {
                       return this->StreamedPublishDataset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::PublishDatasetRequest* /*request*/, ::dsp::v1alpha1::PublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::PublishDatasetRequest,::dsp::v1alpha1::PublishDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnpublishDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnpublishDataset() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::UnpublishDatasetRequest, ::dsp::v1alpha1::UnpublishDatasetResponse>* streamer) {
                       return this->StreamedUnpublishDataset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnpublishDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnpublishDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnpublishDatasetRequest* /*request*/, ::dsp::v1alpha1::UnpublishDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnpublishDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::UnpublishDatasetRequest,::dsp::v1alpha1::UnpublishDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SuspendPublishedDataset() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::SuspendPublishedDatasetRequest, ::dsp::v1alpha1::SuspendPublishedDatasetResponse>* streamer) {
                       return this->StreamedSuspendPublishedDataset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::SuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSuspendPublishedDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::SuspendPublishedDatasetRequest,::dsp::v1alpha1::SuspendPublishedDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnsuspendPublishedDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnsuspendPublishedDataset() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* streamer) {
                       return this->StreamedUnsuspendPublishedDataset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnsuspendPublishedDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnsuspendPublishedDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest* /*request*/, ::dsp::v1alpha1::UnsuspendPublishedDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnsuspendPublishedDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::UnsuspendPublishedDatasetRequest,::dsp::v1alpha1::UnsuspendPublishedDatasetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_GetCatalogue<WithStreamedUnaryMethod_GetDataset<WithStreamedUnaryMethod_PublishDataset<WithStreamedUnaryMethod_UnpublishDataset<WithStreamedUnaryMethod_SuspendPublishedDataset<WithStreamedUnaryMethod_UnsuspendPublishedDataset<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_GetCatalogue<WithStreamedUnaryMethod_GetDataset<WithStreamedUnaryMethod_PublishDataset<WithStreamedUnaryMethod_UnpublishDataset<WithStreamedUnaryMethod_SuspendPublishedDataset<WithStreamedUnaryMethod_UnsuspendPublishedDataset<Service > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace dsp


#endif  // GRPC_dsp_2fv1alpha1_2fprovider_2eproto__INCLUDED
