// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dsp/v1alpha1/client.proto
// Original file comments:
// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_dsp_2fv1alpha1_2fclient_2eproto__INCLUDED
#define GRPC_dsp_2fv1alpha1_2fclient_2eproto__INCLUDED

#include "dsp/v1alpha1/client.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace dsp {
namespace v1alpha1 {

// The ClientService is the expected grpc service that RUN-DSP will interface with.
// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
// The reason for this is that authorization will vary between dataspaces. Also, the provider
// will want to show different data dependent on the credentials.
class ClientService final {
 public:
  static constexpr char const* service_full_name() {
    return "dsp.v1alpha1.ClientService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Ping is a request to test if the provider is working, and to test the auth information.
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::dsp::v1alpha1::ClientServicePingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::ClientServicePingResponse>> AsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::ClientServicePingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::ClientServicePingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::ClientServicePingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    // Gets the catalogue based on the query parameters and the authorization header.
    virtual ::grpc::Status GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderCatalogueResponse>> AsyncGetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderCatalogueResponse>>(AsyncGetProviderCatalogueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderCatalogueResponse>> PrepareAsyncGetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderCatalogueResponse>>(PrepareAsyncGetProviderCatalogueRaw(context, request, cq));
    }
    // Gets information about a single dataset.
    virtual ::grpc::Status GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::dsp::v1alpha1::GetProviderDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetResponse>> AsyncGetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetResponse>>(AsyncGetProviderDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetResponse>> PrepareAsyncGetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetResponse>>(PrepareAsyncGetProviderDatasetRaw(context, request, cq));
    }
    // Publishes a dataset,
    virtual ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>> AsyncGetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>>(AsyncGetProviderDatasetDownloadInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>> PrepareAsyncGetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>>(PrepareAsyncGetProviderDatasetDownloadInformationRaw(context, request, cq));
    }
    // Tells provider that we have finished our transfer.
    virtual ::grpc::Status SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCompleteResponse>> AsyncSignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCompleteResponse>>(AsyncSignalTransferCompleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCompleteResponse>> PrepareAsyncSignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCompleteResponse>>(PrepareAsyncSignalTransferCompleteRaw(context, request, cq));
    }
    // Tells provider to cancel file transfer
    virtual ::grpc::Status SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCancelledResponse>> AsyncSignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCancelledResponse>>(AsyncSignalTransferCancelledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCancelledResponse>> PrepareAsyncSignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCancelledResponse>>(PrepareAsyncSignalTransferCancelledRaw(context, request, cq));
    }
    // Tells provider to suspend file transfer
    virtual ::grpc::Status SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferSuspendResponse>> AsyncSignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferSuspendResponse>>(AsyncSignalTransferSuspendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferSuspendResponse>> PrepareAsyncSignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferSuspendResponse>>(PrepareAsyncSignalTransferSuspendRaw(context, request, cq));
    }
    // Tells provider to resume file transfer
    virtual ::grpc::Status SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::dsp::v1alpha1::SignalTransferResumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferResumeResponse>> AsyncSignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferResumeResponse>>(AsyncSignalTransferResumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferResumeResponse>> PrepareAsyncSignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferResumeResponse>>(PrepareAsyncSignalTransferResumeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Ping is a request to test if the provider is working, and to test the auth information.
      virtual void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the catalogue based on the query parameters and the authorization header.
      virtual void GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets information about a single dataset.
      virtual void GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Publishes a dataset,
      virtual void GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Tells provider that we have finished our transfer.
      virtual void SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Tells provider to cancel file transfer
      virtual void SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Tells provider to suspend file transfer
      virtual void SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Tells provider to resume file transfer
      virtual void SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::ClientServicePingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::ClientServicePingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderCatalogueResponse>* AsyncGetProviderCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderCatalogueResponse>* PrepareAsyncGetProviderCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetResponse>* AsyncGetProviderDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetResponse>* PrepareAsyncGetProviderDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* AsyncGetProviderDatasetDownloadInformationRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* PrepareAsyncGetProviderDatasetDownloadInformationRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCompleteResponse>* AsyncSignalTransferCompleteRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCompleteResponse>* PrepareAsyncSignalTransferCompleteRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCancelledResponse>* AsyncSignalTransferCancelledRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferCancelledResponse>* PrepareAsyncSignalTransferCancelledRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferSuspendResponse>* AsyncSignalTransferSuspendRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferSuspendResponse>* PrepareAsyncSignalTransferSuspendRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferResumeResponse>* AsyncSignalTransferResumeRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsp::v1alpha1::SignalTransferResumeResponse>* PrepareAsyncSignalTransferResumeRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::dsp::v1alpha1::ClientServicePingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>> AsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>> AsyncGetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>>(AsyncGetProviderCatalogueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>> PrepareAsyncGetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>>(PrepareAsyncGetProviderCatalogueRaw(context, request, cq));
    }
    ::grpc::Status GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::dsp::v1alpha1::GetProviderDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>> AsyncGetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>>(AsyncGetProviderDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>> PrepareAsyncGetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>>(PrepareAsyncGetProviderDatasetRaw(context, request, cq));
    }
    ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>> AsyncGetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>>(AsyncGetProviderDatasetDownloadInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>> PrepareAsyncGetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>>(PrepareAsyncGetProviderDatasetDownloadInformationRaw(context, request, cq));
    }
    ::grpc::Status SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>> AsyncSignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>>(AsyncSignalTransferCompleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>> PrepareAsyncSignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>>(PrepareAsyncSignalTransferCompleteRaw(context, request, cq));
    }
    ::grpc::Status SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>> AsyncSignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>>(AsyncSignalTransferCancelledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>> PrepareAsyncSignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>>(PrepareAsyncSignalTransferCancelledRaw(context, request, cq));
    }
    ::grpc::Status SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>> AsyncSignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>>(AsyncSignalTransferSuspendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>> PrepareAsyncSignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>>(PrepareAsyncSignalTransferSuspendRaw(context, request, cq));
    }
    ::grpc::Status SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::dsp::v1alpha1::SignalTransferResumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>> AsyncSignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>>(AsyncSignalTransferResumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>> PrepareAsyncSignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>>(PrepareAsyncSignalTransferResumeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProviderCatalogue(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProviderDataset(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProviderDatasetDownloadInformation(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response, std::function<void(::grpc::Status)>) override;
      void SignalTransferComplete(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response, std::function<void(::grpc::Status)>) override;
      void SignalTransferCancelled(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response, std::function<void(::grpc::Status)>) override;
      void SignalTransferSuspend(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response, std::function<void(::grpc::Status)>) override;
      void SignalTransferResume(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::ClientServicePingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::ClientServicePingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>* AsyncGetProviderCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderCatalogueResponse>* PrepareAsyncGetProviderCatalogueRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>* AsyncGetProviderDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetResponse>* PrepareAsyncGetProviderDatasetRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* AsyncGetProviderDatasetDownloadInformationRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* PrepareAsyncGetProviderDatasetDownloadInformationRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>* AsyncSignalTransferCompleteRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCompleteResponse>* PrepareAsyncSignalTransferCompleteRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>* AsyncSignalTransferCancelledRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferCancelledResponse>* PrepareAsyncSignalTransferCancelledRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>* AsyncSignalTransferSuspendRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferSuspendResponse>* PrepareAsyncSignalTransferSuspendRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>* AsyncSignalTransferResumeRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsp::v1alpha1::SignalTransferResumeResponse>* PrepareAsyncSignalTransferResumeRaw(::grpc::ClientContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProviderCatalogue_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProviderDataset_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProviderDatasetDownloadInformation_;
    const ::grpc::internal::RpcMethod rpcmethod_SignalTransferComplete_;
    const ::grpc::internal::RpcMethod rpcmethod_SignalTransferCancelled_;
    const ::grpc::internal::RpcMethod rpcmethod_SignalTransferSuspend_;
    const ::grpc::internal::RpcMethod rpcmethod_SignalTransferResume_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Ping is a request to test if the provider is working, and to test the auth information.
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response);
    // Gets the catalogue based on the query parameters and the authorization header.
    virtual ::grpc::Status GetProviderCatalogue(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response);
    // Gets information about a single dataset.
    virtual ::grpc::Status GetProviderDataset(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response);
    // Publishes a dataset,
    virtual ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ServerContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response);
    // Tells provider that we have finished our transfer.
    virtual ::grpc::Status SignalTransferComplete(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response);
    // Tells provider to cancel file transfer
    virtual ::grpc::Status SignalTransferCancelled(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response);
    // Tells provider to suspend file transfer
    virtual ::grpc::Status SignalTransferSuspend(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response);
    // Tells provider to resume file transfer
    virtual ::grpc::Status SignalTransferResume(::grpc::ServerContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::ClientServicePingRequest* /*request*/, ::dsp::v1alpha1::ClientServicePingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::dsp::v1alpha1::ClientServicePingRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::ClientServicePingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProviderCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProviderCatalogue() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetProviderCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetProviderCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProviderCatalogue(::grpc::ServerContext* context, ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::GetProviderCatalogueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProviderDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProviderDataset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetProviderDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProviderDataset(::grpc::ServerContext* context, ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::GetProviderDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProviderDatasetDownloadInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProviderDatasetDownloadInformation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetProviderDatasetDownloadInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProviderDatasetDownloadInformation(::grpc::ServerContext* context, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignalTransferComplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignalTransferComplete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SignalTransferComplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferComplete(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCompleteRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferComplete(::grpc::ServerContext* context, ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::SignalTransferCompleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignalTransferCancelled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignalTransferCancelled() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SignalTransferCancelled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferCancelled(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCancelledRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCancelledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferCancelled(::grpc::ServerContext* context, ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::SignalTransferCancelledResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignalTransferSuspend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignalTransferSuspend() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SignalTransferSuspend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferSuspend(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferSuspendRequest* /*request*/, ::dsp::v1alpha1::SignalTransferSuspendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferSuspend(::grpc::ServerContext* context, ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::SignalTransferSuspendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignalTransferResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignalTransferResume() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SignalTransferResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferResume(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferResumeRequest* /*request*/, ::dsp::v1alpha1::SignalTransferResumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferResume(::grpc::ServerContext* context, ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::dsp::v1alpha1::SignalTransferResumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_GetProviderCatalogue<WithAsyncMethod_GetProviderDataset<WithAsyncMethod_GetProviderDatasetDownloadInformation<WithAsyncMethod_SignalTransferComplete<WithAsyncMethod_SignalTransferCancelled<WithAsyncMethod_SignalTransferSuspend<WithAsyncMethod_SignalTransferResume<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::ClientServicePingRequest* request, ::dsp::v1alpha1::ClientServicePingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::ClientServicePingRequest* /*request*/, ::dsp::v1alpha1::ClientServicePingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::ClientServicePingRequest* /*request*/, ::dsp::v1alpha1::ClientServicePingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProviderCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProviderCatalogue() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::GetProviderCatalogueRequest* request, ::dsp::v1alpha1::GetProviderCatalogueResponse* response) { return this->GetProviderCatalogue(context, request, response); }));}
    void SetMessageAllocatorFor_GetProviderCatalogue(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProviderCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetProviderCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProviderCatalogue(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetProviderCatalogueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProviderDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProviderDataset() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::GetProviderDatasetRequest* request, ::dsp::v1alpha1::GetProviderDatasetResponse* response) { return this->GetProviderDataset(context, request, response); }));}
    void SetMessageAllocatorFor_GetProviderDataset(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProviderDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProviderDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProviderDatasetDownloadInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProviderDatasetDownloadInformation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* request, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* response) { return this->GetProviderDatasetDownloadInformation(context, request, response); }));}
    void SetMessageAllocatorFor_GetProviderDatasetDownloadInformation(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProviderDatasetDownloadInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProviderDatasetDownloadInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignalTransferComplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignalTransferComplete() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::SignalTransferCompleteRequest* request, ::dsp::v1alpha1::SignalTransferCompleteResponse* response) { return this->SignalTransferComplete(context, request, response); }));}
    void SetMessageAllocatorFor_SignalTransferComplete(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignalTransferComplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferComplete(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCompleteRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferComplete(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCompleteRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCompleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignalTransferCancelled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignalTransferCancelled() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::SignalTransferCancelledRequest* request, ::dsp::v1alpha1::SignalTransferCancelledResponse* response) { return this->SignalTransferCancelled(context, request, response); }));}
    void SetMessageAllocatorFor_SignalTransferCancelled(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignalTransferCancelled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferCancelled(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCancelledRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCancelledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferCancelled(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCancelledRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCancelledResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignalTransferSuspend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignalTransferSuspend() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::SignalTransferSuspendRequest* request, ::dsp::v1alpha1::SignalTransferSuspendResponse* response) { return this->SignalTransferSuspend(context, request, response); }));}
    void SetMessageAllocatorFor_SignalTransferSuspend(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignalTransferSuspend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferSuspend(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferSuspendRequest* /*request*/, ::dsp::v1alpha1::SignalTransferSuspendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferSuspend(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferSuspendRequest* /*request*/, ::dsp::v1alpha1::SignalTransferSuspendResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignalTransferResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignalTransferResume() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsp::v1alpha1::SignalTransferResumeRequest* request, ::dsp::v1alpha1::SignalTransferResumeResponse* response) { return this->SignalTransferResume(context, request, response); }));}
    void SetMessageAllocatorFor_SignalTransferResume(
        ::grpc::MessageAllocator< ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignalTransferResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferResume(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferResumeRequest* /*request*/, ::dsp::v1alpha1::SignalTransferResumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferResume(
      ::grpc::CallbackServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferResumeRequest* /*request*/, ::dsp::v1alpha1::SignalTransferResumeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Ping<WithCallbackMethod_GetProviderCatalogue<WithCallbackMethod_GetProviderDataset<WithCallbackMethod_GetProviderDatasetDownloadInformation<WithCallbackMethod_SignalTransferComplete<WithCallbackMethod_SignalTransferCancelled<WithCallbackMethod_SignalTransferSuspend<WithCallbackMethod_SignalTransferResume<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::ClientServicePingRequest* /*request*/, ::dsp::v1alpha1::ClientServicePingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProviderCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProviderCatalogue() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetProviderCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetProviderCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProviderDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProviderDataset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetProviderDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProviderDatasetDownloadInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProviderDatasetDownloadInformation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetProviderDatasetDownloadInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignalTransferComplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignalTransferComplete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SignalTransferComplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferComplete(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCompleteRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignalTransferCancelled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignalTransferCancelled() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SignalTransferCancelled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferCancelled(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCancelledRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCancelledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignalTransferSuspend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignalTransferSuspend() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SignalTransferSuspend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferSuspend(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferSuspendRequest* /*request*/, ::dsp::v1alpha1::SignalTransferSuspendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignalTransferResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignalTransferResume() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SignalTransferResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferResume(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferResumeRequest* /*request*/, ::dsp::v1alpha1::SignalTransferResumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::ClientServicePingRequest* /*request*/, ::dsp::v1alpha1::ClientServicePingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProviderCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProviderCatalogue() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetProviderCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetProviderCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProviderCatalogue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProviderDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProviderDataset() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetProviderDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProviderDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProviderDatasetDownloadInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProviderDatasetDownloadInformation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetProviderDatasetDownloadInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProviderDatasetDownloadInformation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignalTransferComplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignalTransferComplete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SignalTransferComplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferComplete(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCompleteRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferComplete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignalTransferCancelled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignalTransferCancelled() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SignalTransferCancelled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferCancelled(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCancelledRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCancelledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferCancelled(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignalTransferSuspend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignalTransferSuspend() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SignalTransferSuspend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferSuspend(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferSuspendRequest* /*request*/, ::dsp::v1alpha1::SignalTransferSuspendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferSuspend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignalTransferResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignalTransferResume() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SignalTransferResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferResume(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferResumeRequest* /*request*/, ::dsp::v1alpha1::SignalTransferResumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalTransferResume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::ClientServicePingRequest* /*request*/, ::dsp::v1alpha1::ClientServicePingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProviderCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProviderCatalogue() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProviderCatalogue(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProviderCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetProviderCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProviderCatalogue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProviderDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProviderDataset() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProviderDataset(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProviderDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProviderDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProviderDatasetDownloadInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProviderDatasetDownloadInformation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProviderDatasetDownloadInformation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProviderDatasetDownloadInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProviderDatasetDownloadInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignalTransferComplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignalTransferComplete() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignalTransferComplete(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignalTransferComplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferComplete(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCompleteRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferComplete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignalTransferCancelled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignalTransferCancelled() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignalTransferCancelled(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignalTransferCancelled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferCancelled(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCancelledRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCancelledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferCancelled(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignalTransferSuspend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignalTransferSuspend() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignalTransferSuspend(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignalTransferSuspend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferSuspend(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferSuspendRequest* /*request*/, ::dsp::v1alpha1::SignalTransferSuspendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferSuspend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignalTransferResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignalTransferResume() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignalTransferResume(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignalTransferResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalTransferResume(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferResumeRequest* /*request*/, ::dsp::v1alpha1::SignalTransferResumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignalTransferResume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::ClientServicePingRequest, ::dsp::v1alpha1::ClientServicePingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::ClientServicePingRequest* /*request*/, ::dsp::v1alpha1::ClientServicePingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::ClientServicePingRequest,::dsp::v1alpha1::ClientServicePingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProviderCatalogue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProviderCatalogue() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::GetProviderCatalogueRequest, ::dsp::v1alpha1::GetProviderCatalogueResponse>* streamer) {
                       return this->StreamedGetProviderCatalogue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProviderCatalogue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProviderCatalogue(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderCatalogueRequest* /*request*/, ::dsp::v1alpha1::GetProviderCatalogueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProviderCatalogue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::GetProviderCatalogueRequest,::dsp::v1alpha1::GetProviderCatalogueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProviderDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProviderDataset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::GetProviderDatasetRequest, ::dsp::v1alpha1::GetProviderDatasetResponse>* streamer) {
                       return this->StreamedGetProviderDataset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProviderDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProviderDataset(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProviderDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::GetProviderDatasetRequest,::dsp::v1alpha1::GetProviderDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProviderDatasetDownloadInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProviderDatasetDownloadInformation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* streamer) {
                       return this->StreamedGetProviderDatasetDownloadInformation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProviderDatasetDownloadInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProviderDatasetDownloadInformation(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest* /*request*/, ::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProviderDatasetDownloadInformation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::GetProviderDatasetDownloadInformationRequest,::dsp::v1alpha1::GetProviderDatasetDownloadInformationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignalTransferComplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignalTransferComplete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::SignalTransferCompleteRequest, ::dsp::v1alpha1::SignalTransferCompleteResponse>* streamer) {
                       return this->StreamedSignalTransferComplete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignalTransferComplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignalTransferComplete(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCompleteRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignalTransferComplete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::SignalTransferCompleteRequest,::dsp::v1alpha1::SignalTransferCompleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignalTransferCancelled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignalTransferCancelled() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::SignalTransferCancelledRequest, ::dsp::v1alpha1::SignalTransferCancelledResponse>* streamer) {
                       return this->StreamedSignalTransferCancelled(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignalTransferCancelled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignalTransferCancelled(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferCancelledRequest* /*request*/, ::dsp::v1alpha1::SignalTransferCancelledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignalTransferCancelled(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::SignalTransferCancelledRequest,::dsp::v1alpha1::SignalTransferCancelledResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignalTransferSuspend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignalTransferSuspend() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::SignalTransferSuspendRequest, ::dsp::v1alpha1::SignalTransferSuspendResponse>* streamer) {
                       return this->StreamedSignalTransferSuspend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignalTransferSuspend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignalTransferSuspend(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferSuspendRequest* /*request*/, ::dsp::v1alpha1::SignalTransferSuspendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignalTransferSuspend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::SignalTransferSuspendRequest,::dsp::v1alpha1::SignalTransferSuspendResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignalTransferResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignalTransferResume() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsp::v1alpha1::SignalTransferResumeRequest, ::dsp::v1alpha1::SignalTransferResumeResponse>* streamer) {
                       return this->StreamedSignalTransferResume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignalTransferResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignalTransferResume(::grpc::ServerContext* /*context*/, const ::dsp::v1alpha1::SignalTransferResumeRequest* /*request*/, ::dsp::v1alpha1::SignalTransferResumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignalTransferResume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsp::v1alpha1::SignalTransferResumeRequest,::dsp::v1alpha1::SignalTransferResumeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_GetProviderCatalogue<WithStreamedUnaryMethod_GetProviderDataset<WithStreamedUnaryMethod_GetProviderDatasetDownloadInformation<WithStreamedUnaryMethod_SignalTransferComplete<WithStreamedUnaryMethod_SignalTransferCancelled<WithStreamedUnaryMethod_SignalTransferSuspend<WithStreamedUnaryMethod_SignalTransferResume<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_GetProviderCatalogue<WithStreamedUnaryMethod_GetProviderDataset<WithStreamedUnaryMethod_GetProviderDatasetDownloadInformation<WithStreamedUnaryMethod_SignalTransferComplete<WithStreamedUnaryMethod_SignalTransferCancelled<WithStreamedUnaryMethod_SignalTransferSuspend<WithStreamedUnaryMethod_SignalTransferResume<Service > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace dsp


#endif  // GRPC_dsp_2fv1alpha1_2fclient_2eproto__INCLUDED
