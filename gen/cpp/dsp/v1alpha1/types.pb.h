// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dsp/v1alpha1/types.proto
// Protobuf C++ Version: 5.27.4

#ifndef GOOGLE_PROTOBUF_INCLUDED_dsp_2fv1alpha1_2ftypes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dsp_2fv1alpha1_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dsp_2fv1alpha1_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dsp_2fv1alpha1_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dsp_2fv1alpha1_2ftypes_2eproto;
namespace dsp {
namespace v1alpha1 {
class Dataset;
struct DatasetDefaultTypeInternal;
extern DatasetDefaultTypeInternal _Dataset_default_instance_;
class Dataset_MetadataEntry_DoNotUse;
struct Dataset_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Dataset_MetadataEntry_DoNotUseDefaultTypeInternal _Dataset_MetadataEntry_DoNotUse_default_instance_;
class Multilingual;
struct MultilingualDefaultTypeInternal;
extern MultilingualDefaultTypeInternal _Multilingual_default_instance_;
class PublishInfo;
struct PublishInfoDefaultTypeInternal;
extern PublishInfoDefaultTypeInternal _PublishInfo_default_instance_;
}  // namespace v1alpha1
}  // namespace dsp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dsp {
namespace v1alpha1 {
enum AuthenticationType : int {
  AUTHENTICATION_TYPE_UNSPECIFIED = 0,
  AUTHENTICATION_TYPE_BEARER = 1,
  AUTHENTICATION_TYPE_BASIC = 2,
  AuthenticationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthenticationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthenticationType_IsValid(int value);
extern const uint32_t AuthenticationType_internal_data_[];
constexpr AuthenticationType AuthenticationType_MIN = static_cast<AuthenticationType>(0);
constexpr AuthenticationType AuthenticationType_MAX = static_cast<AuthenticationType>(2);
constexpr int AuthenticationType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AuthenticationType_descriptor();
template <typename T>
const std::string& AuthenticationType_Name(T value) {
  static_assert(std::is_same<T, AuthenticationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthenticationType_Name().");
  return AuthenticationType_Name(static_cast<AuthenticationType>(value));
}
template <>
inline const std::string& AuthenticationType_Name(AuthenticationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthenticationType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AuthenticationType_Parse(absl::string_view name, AuthenticationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthenticationType>(
      AuthenticationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PublishInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dsp.v1alpha1.PublishInfo) */ {
 public:
  inline PublishInfo() : PublishInfo(nullptr) {}
  ~PublishInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishInfo(const PublishInfo& from) : PublishInfo(nullptr, from) {}
  inline PublishInfo(PublishInfo&& from) noexcept
      : PublishInfo(nullptr, std::move(from)) {}
  inline PublishInfo& operator=(const PublishInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishInfo& operator=(PublishInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishInfo* internal_default_instance() {
    return reinterpret_cast<const PublishInfo*>(
        &_PublishInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PublishInfo& a, PublishInfo& b) { a.Swap(&b); }
  inline void Swap(PublishInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PublishInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishInfo& from) { PublishInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PublishInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dsp.v1alpha1.PublishInfo"; }

 protected:
  explicit PublishInfo(::google::protobuf::Arena* arena);
  PublishInfo(::google::protobuf::Arena* arena, const PublishInfo& from);
  PublishInfo(::google::protobuf::Arena* arena, PublishInfo&& from) noexcept
      : PublishInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUrlFieldNumber = 1,
    kUsernameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kAuthenticationTypeFieldNumber = 2,
  };
  // string url = 1 [json_name = "url"];
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string username = 3 [json_name = "username"];
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 4 [json_name = "password"];
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // .dsp.v1alpha1.AuthenticationType authentication_type = 2 [json_name = "authenticationType"];
  void clear_authentication_type() ;
  ::dsp::v1alpha1::AuthenticationType authentication_type() const;
  void set_authentication_type(::dsp::v1alpha1::AuthenticationType value);

  private:
  ::dsp::v1alpha1::AuthenticationType _internal_authentication_type() const;
  void _internal_set_authentication_type(::dsp::v1alpha1::AuthenticationType value);

  public:
  // @@protoc_insertion_point(class_scope:dsp.v1alpha1.PublishInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PublishInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    int authentication_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dsp_2fv1alpha1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Multilingual final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dsp.v1alpha1.Multilingual) */ {
 public:
  inline Multilingual() : Multilingual(nullptr) {}
  ~Multilingual() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Multilingual(
      ::google::protobuf::internal::ConstantInitialized);

  inline Multilingual(const Multilingual& from) : Multilingual(nullptr, from) {}
  inline Multilingual(Multilingual&& from) noexcept
      : Multilingual(nullptr, std::move(from)) {}
  inline Multilingual& operator=(const Multilingual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Multilingual& operator=(Multilingual&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Multilingual& default_instance() {
    return *internal_default_instance();
  }
  static inline const Multilingual* internal_default_instance() {
    return reinterpret_cast<const Multilingual*>(
        &_Multilingual_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Multilingual& a, Multilingual& b) { a.Swap(&b); }
  inline void Swap(Multilingual* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Multilingual* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Multilingual* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Multilingual>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Multilingual& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Multilingual& from) { Multilingual::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Multilingual* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dsp.v1alpha1.Multilingual"; }

 protected:
  explicit Multilingual(::google::protobuf::Arena* arena);
  Multilingual(::google::protobuf::Arena* arena, const Multilingual& from);
  Multilingual(::google::protobuf::Arena* arena, Multilingual&& from) noexcept
      : Multilingual(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // string value = 1 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // string language = 2 [json_name = "language"];
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* value);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // @@protoc_insertion_point(class_scope:dsp.v1alpha1.Multilingual)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Multilingual_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Multilingual& from_msg);
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dsp_2fv1alpha1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Dataset_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          Dataset_MetadataEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      Dataset_MetadataEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Dataset_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Dataset_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Dataset_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Dataset_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Dataset_MetadataEntry_DoNotUse*>(
        &_Dataset_MetadataEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_dsp_2fv1alpha1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Dataset final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dsp.v1alpha1.Dataset) */ {
 public:
  inline Dataset() : Dataset(nullptr) {}
  ~Dataset() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Dataset(
      ::google::protobuf::internal::ConstantInitialized);

  inline Dataset(const Dataset& from) : Dataset(nullptr, from) {}
  inline Dataset(Dataset&& from) noexcept
      : Dataset(nullptr, std::move(from)) {}
  inline Dataset& operator=(const Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dataset& operator=(Dataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dataset* internal_default_instance() {
    return reinterpret_cast<const Dataset*>(
        &_Dataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Dataset& a, Dataset& b) { a.Swap(&b); }
  inline void Swap(Dataset* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dataset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dataset* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Dataset>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Dataset& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Dataset& from) { Dataset::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Dataset* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dsp.v1alpha1.Dataset"; }

 protected:
  explicit Dataset(::google::protobuf::Arena* arena);
  Dataset(::google::protobuf::Arena* arena, const Dataset& from);
  Dataset(::google::protobuf::Arena* arena, Dataset&& from) noexcept
      : Dataset(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDescriptionFieldNumber = 4,
    kKeywordsFieldNumber = 5,
    kMetadataFieldNumber = 9,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAccessMethodsFieldNumber = 3,
    kCreatorFieldNumber = 6,
    kIssuedFieldNumber = 7,
    kModifiedFieldNumber = 8,
  };
  // repeated .dsp.v1alpha1.Multilingual description = 4 [json_name = "description"];
  int description_size() const;
  private:
  int _internal_description_size() const;

  public:
  void clear_description() ;
  ::dsp::v1alpha1::Multilingual* mutable_description(int index);
  ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>* mutable_description();

  private:
  const ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>& _internal_description() const;
  ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>* _internal_mutable_description();
  public:
  const ::dsp::v1alpha1::Multilingual& description(int index) const;
  ::dsp::v1alpha1::Multilingual* add_description();
  const ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>& description() const;
  // repeated string keywords = 5 [json_name = "keywords"];
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;

  public:
  void clear_keywords() ;
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, std::size_t size);
  void set_keywords(int index, absl::string_view value);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, std::size_t size);
  void add_keywords(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keywords() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keywords();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keywords() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keywords();

  public:
  // map<string, string> metadata = 9 [json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string title = 2 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string access_methods = 3 [json_name = "accessMethods"];
  void clear_access_methods() ;
  const std::string& access_methods() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_methods(Arg_&& arg, Args_... args);
  std::string* mutable_access_methods();
  PROTOBUF_NODISCARD std::string* release_access_methods();
  void set_allocated_access_methods(std::string* value);

  private:
  const std::string& _internal_access_methods() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_methods(
      const std::string& value);
  std::string* _internal_mutable_access_methods();

  public:
  // optional string creator = 6 [json_name = "creator"];
  bool has_creator() const;
  void clear_creator() ;
  const std::string& creator() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator(Arg_&& arg, Args_... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* value);

  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(
      const std::string& value);
  std::string* _internal_mutable_creator();

  public:
  // optional .google.protobuf.Timestamp issued = 7 [json_name = "issued"];
  bool has_issued() const;
  void clear_issued() ;
  const ::google::protobuf::Timestamp& issued() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_issued();
  ::google::protobuf::Timestamp* mutable_issued();
  void set_allocated_issued(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_issued(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_issued();

  private:
  const ::google::protobuf::Timestamp& _internal_issued() const;
  ::google::protobuf::Timestamp* _internal_mutable_issued();

  public:
  // optional .google.protobuf.Timestamp modified = 8 [json_name = "modified"];
  bool has_modified() const;
  void clear_modified() ;
  const ::google::protobuf::Timestamp& modified() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_modified();
  ::google::protobuf::Timestamp* mutable_modified();
  void set_allocated_modified(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_modified(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_modified();

  private:
  const ::google::protobuf::Timestamp& _internal_modified() const;
  ::google::protobuf::Timestamp* _internal_mutable_modified();

  public:
  // @@protoc_insertion_point(class_scope:dsp.v1alpha1.Dataset)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 4,
      81, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Dataset_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Dataset& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::dsp::v1alpha1::Multilingual > description_;
    ::google::protobuf::RepeatedPtrField<std::string> keywords_;
    ::google::protobuf::internal::MapField<Dataset_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr access_methods_;
    ::google::protobuf::internal::ArenaStringPtr creator_;
    ::google::protobuf::Timestamp* issued_;
    ::google::protobuf::Timestamp* modified_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dsp_2fv1alpha1_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Dataset

// string id = 1 [json_name = "id"];
inline void Dataset::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Dataset::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dataset::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Dataset.id)
}
inline std::string* Dataset::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.id)
  return _s;
}
inline const std::string& Dataset::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Dataset::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Dataset::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Dataset::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Dataset.id)
  return _impl_.id_.Release();
}
inline void Dataset::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Dataset.id)
}

// string title = 2 [json_name = "title"];
inline void Dataset::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Dataset::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dataset::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Dataset.title)
}
inline std::string* Dataset::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.title)
  return _s;
}
inline const std::string& Dataset::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void Dataset::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* Dataset::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* Dataset::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Dataset.title)
  return _impl_.title_.Release();
}
inline void Dataset::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Dataset.title)
}

// string access_methods = 3 [json_name = "accessMethods"];
inline void Dataset::clear_access_methods() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_methods_.ClearToEmpty();
}
inline const std::string& Dataset::access_methods() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.access_methods)
  return _internal_access_methods();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dataset::set_access_methods(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_methods_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Dataset.access_methods)
}
inline std::string* Dataset::mutable_access_methods() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_methods();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.access_methods)
  return _s;
}
inline const std::string& Dataset::_internal_access_methods() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_methods_.Get();
}
inline void Dataset::_internal_set_access_methods(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_methods_.Set(value, GetArena());
}
inline std::string* Dataset::_internal_mutable_access_methods() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.access_methods_.Mutable( GetArena());
}
inline std::string* Dataset::release_access_methods() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Dataset.access_methods)
  return _impl_.access_methods_.Release();
}
inline void Dataset::set_allocated_access_methods(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_methods_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.access_methods_.IsDefault()) {
          _impl_.access_methods_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Dataset.access_methods)
}

// repeated .dsp.v1alpha1.Multilingual description = 4 [json_name = "description"];
inline int Dataset::_internal_description_size() const {
  return _internal_description().size();
}
inline int Dataset::description_size() const {
  return _internal_description_size();
}
inline void Dataset::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Clear();
}
inline ::dsp::v1alpha1::Multilingual* Dataset::mutable_description(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.description)
  return _internal_mutable_description()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>* Dataset::mutable_description()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dsp.v1alpha1.Dataset.description)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_description();
}
inline const ::dsp::v1alpha1::Multilingual& Dataset::description(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.description)
  return _internal_description().Get(index);
}
inline ::dsp::v1alpha1::Multilingual* Dataset::add_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::dsp::v1alpha1::Multilingual* _add = _internal_mutable_description()->Add();
  // @@protoc_insertion_point(field_add:dsp.v1alpha1.Dataset.description)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>& Dataset::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dsp.v1alpha1.Dataset.description)
  return _internal_description();
}
inline const ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>&
Dataset::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_;
}
inline ::google::protobuf::RepeatedPtrField<::dsp::v1alpha1::Multilingual>*
Dataset::_internal_mutable_description() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.description_;
}

// repeated string keywords = 5 [json_name = "keywords"];
inline int Dataset::_internal_keywords_size() const {
  return _internal_keywords().size();
}
inline int Dataset::keywords_size() const {
  return _internal_keywords_size();
}
inline void Dataset::clear_keywords() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keywords_.Clear();
}
inline std::string* Dataset::add_keywords()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_keywords()->Add();
  // @@protoc_insertion_point(field_add_mutable:dsp.v1alpha1.Dataset.keywords)
  return _s;
}
inline const std::string& Dataset::keywords(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.keywords)
  return _internal_keywords().Get(index);
}
inline std::string* Dataset::mutable_keywords(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.keywords)
  return _internal_mutable_keywords()->Mutable(index);
}
inline void Dataset::set_keywords(int index, const std::string& value) {
  _internal_mutable_keywords()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::set_keywords(int index, std::string&& value) {
  _internal_mutable_keywords()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::set_keywords(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keywords()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::set_keywords(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keywords()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::set_keywords(int index, absl::string_view value) {
  _internal_mutable_keywords()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::add_keywords(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keywords()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::add_keywords(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keywords()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::add_keywords(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keywords()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::add_keywords(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keywords()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dsp.v1alpha1.Dataset.keywords)
}
inline void Dataset::add_keywords(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keywords()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:dsp.v1alpha1.Dataset.keywords)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Dataset::keywords() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dsp.v1alpha1.Dataset.keywords)
  return _internal_keywords();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Dataset::mutable_keywords() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dsp.v1alpha1.Dataset.keywords)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keywords();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Dataset::_internal_keywords() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keywords_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Dataset::_internal_mutable_keywords() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keywords_;
}

// optional string creator = 6 [json_name = "creator"];
inline bool Dataset::has_creator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Dataset::clear_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Dataset::creator() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.creator)
  return _internal_creator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dataset::set_creator(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creator_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Dataset.creator)
}
inline std::string* Dataset::mutable_creator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.creator)
  return _s;
}
inline const std::string& Dataset::_internal_creator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creator_.Get();
}
inline void Dataset::_internal_set_creator(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creator_.Set(value, GetArena());
}
inline std::string* Dataset::_internal_mutable_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.creator_.Mutable( GetArena());
}
inline std::string* Dataset::release_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Dataset.creator)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.creator_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Dataset::set_allocated_creator(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.creator_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.creator_.IsDefault()) {
          _impl_.creator_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Dataset.creator)
}

// optional .google.protobuf.Timestamp issued = 7 [json_name = "issued"];
inline bool Dataset::has_issued() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.issued_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Dataset::_internal_issued() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.issued_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Dataset::issued() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.issued)
  return _internal_issued();
}
inline void Dataset::unsafe_arena_set_allocated_issued(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issued_);
  }
  _impl_.issued_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsp.v1alpha1.Dataset.issued)
}
inline ::google::protobuf::Timestamp* Dataset::release_issued() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.issued_;
  _impl_.issued_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Dataset::unsafe_arena_release_issued() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Dataset.issued)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.issued_;
  _impl_.issued_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Dataset::_internal_mutable_issued() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.issued_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.issued_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.issued_;
}
inline ::google::protobuf::Timestamp* Dataset::mutable_issued() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_issued();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.issued)
  return _msg;
}
inline void Dataset::set_allocated_issued(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issued_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.issued_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Dataset.issued)
}

// optional .google.protobuf.Timestamp modified = 8 [json_name = "modified"];
inline bool Dataset::has_modified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.modified_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Dataset::_internal_modified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.modified_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Dataset::modified() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Dataset.modified)
  return _internal_modified();
}
inline void Dataset::unsafe_arena_set_allocated_modified(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.modified_);
  }
  _impl_.modified_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsp.v1alpha1.Dataset.modified)
}
inline ::google::protobuf::Timestamp* Dataset::release_modified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.modified_;
  _impl_.modified_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Dataset::unsafe_arena_release_modified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Dataset.modified)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.modified_;
  _impl_.modified_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Dataset::_internal_mutable_modified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.modified_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.modified_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.modified_;
}
inline ::google::protobuf::Timestamp* Dataset::mutable_modified() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_modified();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Dataset.modified)
  return _msg;
}
inline void Dataset::set_allocated_modified(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.modified_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.modified_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Dataset.modified)
}

// map<string, string> metadata = 9 [json_name = "metadata"];
inline int Dataset::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int Dataset::metadata_size() const {
  return _internal_metadata_size();
}
inline void Dataset::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Dataset::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Dataset::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:dsp.v1alpha1.Dataset.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* Dataset::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Dataset::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:dsp.v1alpha1.Dataset.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// PublishInfo

// string url = 1 [json_name = "url"];
inline void PublishInfo::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& PublishInfo::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.PublishInfo.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PublishInfo::set_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.PublishInfo.url)
}
inline std::string* PublishInfo::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.PublishInfo.url)
  return _s;
}
inline const std::string& PublishInfo::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void PublishInfo::_internal_set_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* PublishInfo::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* PublishInfo::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.PublishInfo.url)
  return _impl_.url_.Release();
}
inline void PublishInfo::set_allocated_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.PublishInfo.url)
}

// .dsp.v1alpha1.AuthenticationType authentication_type = 2 [json_name = "authenticationType"];
inline void PublishInfo::clear_authentication_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authentication_type_ = 0;
}
inline ::dsp::v1alpha1::AuthenticationType PublishInfo::authentication_type() const {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.PublishInfo.authentication_type)
  return _internal_authentication_type();
}
inline void PublishInfo::set_authentication_type(::dsp::v1alpha1::AuthenticationType value) {
  _internal_set_authentication_type(value);
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.PublishInfo.authentication_type)
}
inline ::dsp::v1alpha1::AuthenticationType PublishInfo::_internal_authentication_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dsp::v1alpha1::AuthenticationType>(_impl_.authentication_type_);
}
inline void PublishInfo::_internal_set_authentication_type(::dsp::v1alpha1::AuthenticationType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authentication_type_ = value;
}

// string username = 3 [json_name = "username"];
inline void PublishInfo::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PublishInfo::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.PublishInfo.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PublishInfo::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.PublishInfo.username)
}
inline std::string* PublishInfo::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.PublishInfo.username)
  return _s;
}
inline const std::string& PublishInfo::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void PublishInfo::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PublishInfo::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PublishInfo::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.PublishInfo.username)
  return _impl_.username_.Release();
}
inline void PublishInfo::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.PublishInfo.username)
}

// string password = 4 [json_name = "password"];
inline void PublishInfo::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& PublishInfo::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.PublishInfo.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PublishInfo::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.PublishInfo.password)
}
inline std::string* PublishInfo::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.PublishInfo.password)
  return _s;
}
inline const std::string& PublishInfo::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void PublishInfo::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* PublishInfo::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* PublishInfo::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.PublishInfo.password)
  return _impl_.password_.Release();
}
inline void PublishInfo::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.PublishInfo.password)
}

// -------------------------------------------------------------------

// Multilingual

// string value = 1 [json_name = "value"];
inline void Multilingual::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Multilingual::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Multilingual.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Multilingual::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Multilingual.value)
}
inline std::string* Multilingual::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Multilingual.value)
  return _s;
}
inline const std::string& Multilingual::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void Multilingual::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Multilingual::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Multilingual::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Multilingual.value)
  return _impl_.value_.Release();
}
inline void Multilingual::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Multilingual.value)
}

// string language = 2 [json_name = "language"];
inline void Multilingual::clear_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.ClearToEmpty();
}
inline const std::string& Multilingual::language() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dsp.v1alpha1.Multilingual.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Multilingual::set_language(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dsp.v1alpha1.Multilingual.language)
}
inline std::string* Multilingual::mutable_language() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:dsp.v1alpha1.Multilingual.language)
  return _s;
}
inline const std::string& Multilingual::_internal_language() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.language_.Get();
}
inline void Multilingual::_internal_set_language(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.Set(value, GetArena());
}
inline std::string* Multilingual::_internal_mutable_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.language_.Mutable( GetArena());
}
inline std::string* Multilingual::release_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dsp.v1alpha1.Multilingual.language)
  return _impl_.language_.Release();
}
inline void Multilingual::set_allocated_language(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsp.v1alpha1.Multilingual.language)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace dsp


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::dsp::v1alpha1::AuthenticationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dsp::v1alpha1::AuthenticationType>() {
  return ::dsp::v1alpha1::AuthenticationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dsp_2fv1alpha1_2ftypes_2eproto_2epb_2eh
