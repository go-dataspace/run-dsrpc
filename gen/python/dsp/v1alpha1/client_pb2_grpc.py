# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dsp.v1alpha1 import client_pb2 as dsp_dot_v1alpha1_dot_client__pb2


class ClientServiceStub(object):
    """The ClientService is the expected grpc service that RUN-DSP will interface with.
    Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
    The reason for this is that authorization will vary between dataspaces. Also, the provider
    will want to show different data dependent on the credentials.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/Ping',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.ClientServicePingRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.ClientServicePingResponse.FromString,
                _registered_method=True)
        self.GetProviderCatalogue = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/GetProviderCatalogue',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderCatalogueRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderCatalogueResponse.FromString,
                _registered_method=True)
        self.GetProviderDataset = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/GetProviderDataset',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetResponse.FromString,
                _registered_method=True)
        self.GetProviderDatasetDownloadInformation = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/GetProviderDatasetDownloadInformation',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetDownloadInformationRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetDownloadInformationResponse.FromString,
                _registered_method=True)
        self.SignalTransferComplete = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/SignalTransferComplete',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCompleteRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCompleteResponse.FromString,
                _registered_method=True)
        self.SignalTransferCancelled = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/SignalTransferCancelled',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCancelledRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCancelledResponse.FromString,
                _registered_method=True)
        self.SignalTransferSuspend = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/SignalTransferSuspend',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferSuspendRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferSuspendResponse.FromString,
                _registered_method=True)
        self.SignalTransferResume = channel.unary_unary(
                '/dsp.v1alpha1.ClientService/SignalTransferResume',
                request_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferResumeRequest.SerializeToString,
                response_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferResumeResponse.FromString,
                _registered_method=True)


class ClientServiceServicer(object):
    """The ClientService is the expected grpc service that RUN-DSP will interface with.
    Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
    The reason for this is that authorization will vary between dataspaces. Also, the provider
    will want to show different data dependent on the credentials.
    """

    def Ping(self, request, context):
        """Ping is a request to test if the provider is working, and to test the auth information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProviderCatalogue(self, request, context):
        """Gets the catalogue based on the query parameters and the authorization header.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProviderDataset(self, request, context):
        """Gets information about a single dataset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProviderDatasetDownloadInformation(self, request, context):
        """Publishes a dataset,
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalTransferComplete(self, request, context):
        """Tells provider that we have finished our transfer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalTransferCancelled(self, request, context):
        """Tells provider to cancel file transfer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalTransferSuspend(self, request, context):
        """Tells provider to suspend file transfer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalTransferResume(self, request, context):
        """Tells provider to resume file transfer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.ClientServicePingRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.ClientServicePingResponse.SerializeToString,
            ),
            'GetProviderCatalogue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProviderCatalogue,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderCatalogueRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderCatalogueResponse.SerializeToString,
            ),
            'GetProviderDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProviderDataset,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetResponse.SerializeToString,
            ),
            'GetProviderDatasetDownloadInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProviderDatasetDownloadInformation,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetDownloadInformationRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetDownloadInformationResponse.SerializeToString,
            ),
            'SignalTransferComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalTransferComplete,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCompleteRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCompleteResponse.SerializeToString,
            ),
            'SignalTransferCancelled': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalTransferCancelled,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCancelledRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCancelledResponse.SerializeToString,
            ),
            'SignalTransferSuspend': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalTransferSuspend,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferSuspendRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferSuspendResponse.SerializeToString,
            ),
            'SignalTransferResume': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalTransferResume,
                    request_deserializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferResumeRequest.FromString,
                    response_serializer=dsp_dot_v1alpha1_dot_client__pb2.SignalTransferResumeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dsp.v1alpha1.ClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dsp.v1alpha1.ClientService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientService(object):
    """The ClientService is the expected grpc service that RUN-DSP will interface with.
    Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
    The reason for this is that authorization will vary between dataspaces. Also, the provider
    will want to show different data dependent on the credentials.
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/Ping',
            dsp_dot_v1alpha1_dot_client__pb2.ClientServicePingRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.ClientServicePingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProviderCatalogue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/GetProviderCatalogue',
            dsp_dot_v1alpha1_dot_client__pb2.GetProviderCatalogueRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.GetProviderCatalogueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProviderDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/GetProviderDataset',
            dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProviderDatasetDownloadInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/GetProviderDatasetDownloadInformation',
            dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetDownloadInformationRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.GetProviderDatasetDownloadInformationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignalTransferComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/SignalTransferComplete',
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCompleteRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCompleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignalTransferCancelled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/SignalTransferCancelled',
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCancelledRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferCancelledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignalTransferSuspend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/SignalTransferSuspend',
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferSuspendRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferSuspendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignalTransferResume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dsp.v1alpha1.ClientService/SignalTransferResume',
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferResumeRequest.SerializeToString,
            dsp_dot_v1alpha1_dot_client__pb2.SignalTransferResumeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
