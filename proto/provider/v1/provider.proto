// Copyright 2024 go-dataspace
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package provider.v1;

import "google/protobuf/timestamp.proto";

// The ProviderService is the expected grpc service that RUN-DSP will interface with.
// Outside of the defined calls, RUN-DSP will also forward the `authorization` header.
// The reason for this is that authorization will vary between dataspaces. Also, the provider
// will want to show different data dependent on the credentials.
service ProviderService {
  // Ping is a request to test if the provider is working, and to test the auth information.
  rpc Ping(PingRequest) returns (PingResponse) {}
  // Gets the catalogue based on the query parameters and the authorization header.
  rpc GetCatalogue(GetCatalogueRequest) returns (GetCatalogueResponse) {}
  // Gets information about a single dataset.
  rpc GetDataset(GetDatasetRequest) returns (GetDatasetResponse) {}
  // Publishes a dataset,
  rpc PublishDataset(PublishDatasetRequest) returns (PublishDatasetResponse) {}
  // Unpublishes a dataset.
  rpc UnpublishDataset(UnpublishDatasetRequest) returns (UnpublishDatasetResponse) {}
}

// PingRequest is an empty message, used instead of the Empty type in case we want
// to add parameters.
message PingRequest {}

// PingResponse contains infomational data about the provider.
message PingResponse {
  string providerName = 1;
  string provider_description = 2;
  bool authenticated = 3;
}

// GetCatalogRequest represents the parameters for the GetCatalog call.
message GetCatalogueRequest {
  // query_parameters is just a key/value map. These are not specified in the dataspace standard.
  // RUN-DSP also does not define them yet, so for now this is a placeholder.
  map<string, string> query_parameters = 1;
}

// GetCatalogueResponse returns all the datasets matched by GetCatalogue.
message GetCatalogueResponse {
  repeated Dataset datasets = 1;
}

// GetDatasetRequest contains the dataset ID.
message GetDatasetRequest {
  string dataset_id = 1;
}

// GetDatasetResponse contains the requested dataset.
message GetDatasetResponse {
  Dataset dataset = 1;
}

// PublishDatasetRequest contains the ID for the dataset, and a publish ID that's specific to
// this publish instance. A dataset can be published many concurrent times with different credentials.
message PublishDatasetRequest {
  string dataset_id = 1;
  string publish_id = 2;
}

// PublishDatasetResponse contains the publish information.
message PublishDatasetResponse {
  PublishInfo publish_info = 1;
}

// UnpublishDatasetRequest contains the publish ID of the published dataset.
message UnpublishDatasetRequest {
  string publish_id = 1;
}

// UnpublishDatasetResponse contains a boolean indicating success.
message UnpublishDatasetResponse {
  bool success = 1;
}

// Dataset represents a dataset. What exactly is in a dataset is up to the service.
// An example of a dataset could be a file that's served, or multiple files
// that are considered a set.
message Dataset {
  string id = 1;
  string title = 2;
  string access_methods = 3;
  repeated Multilingual description = 4;
  repeated string keywords = 5;
  optional string creator = 6;
  optional google.protobuf.Timestamp issued = 7;
  optional google.protobuf.Timestamp modified = 8;
  map<string, string> metadata = 9;
}

// PublishInfo represents a published file, where to get it and its authentication details.
message PublishInfo {
  string url = 1;
  AuthenticationType authentication_type = 2;
  string username = 3;
  string password = 4;
}

// AuthenticationType represents the way to authenticate to get a published information.
enum AuthenticationType {
  AUTHENTICATION_TYPE_UNSPECIFIED = 0;
  AUTHENTICATION_TYPE_BEARER = 1;
  AUTHENTICATION_TYPE_BASIC = 2;
}

// Multilingual represents a message with language metadata attached.
message Multilingual {
  string value = 1;
  string language = 2;
}
